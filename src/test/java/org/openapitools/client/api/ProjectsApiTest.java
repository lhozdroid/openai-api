/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectApiKey;
import org.openapitools.client.model.ProjectApiKeyDeleteResponse;
import org.openapitools.client.model.ProjectApiKeyListResponse;
import org.openapitools.client.model.ProjectCreateRequest;
import org.openapitools.client.model.ProjectListResponse;
import org.openapitools.client.model.ProjectRateLimit;
import org.openapitools.client.model.ProjectRateLimitListResponse;
import org.openapitools.client.model.ProjectRateLimitUpdateRequest;
import org.openapitools.client.model.ProjectServiceAccount;
import org.openapitools.client.model.ProjectServiceAccountCreateRequest;
import org.openapitools.client.model.ProjectServiceAccountCreateResponse;
import org.openapitools.client.model.ProjectServiceAccountDeleteResponse;
import org.openapitools.client.model.ProjectServiceAccountListResponse;
import org.openapitools.client.model.ProjectUpdateRequest;
import org.openapitools.client.model.ProjectUser;
import org.openapitools.client.model.ProjectUserCreateRequest;
import org.openapitools.client.model.ProjectUserDeleteResponse;
import org.openapitools.client.model.ProjectUserListResponse;
import org.openapitools.client.model.ProjectUserUpdateRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Archives a project in the organization. Archived projects cannot be used or updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveProjectTest() throws ApiException {
        String projectId = null;
        Project response = api.archiveProject(projectId);

        // TODO: test validations
    }
    /**
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectCreateRequest projectCreateRequest = null;
        Project response = api.createProject(projectCreateRequest);

        // TODO: test validations
    }
    /**
     * Creates a new service account in the project. This also returns an unredacted API key for the service account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectServiceAccountTest() throws ApiException {
        String projectId = null;
        ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest = null;
        ProjectServiceAccountCreateResponse response = api.createProjectServiceAccount(projectId, projectServiceAccountCreateRequest);

        // TODO: test validations
    }
    /**
     * Adds a user to the project. Users must already be members of the organization to be added to a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectUserTest() throws ApiException {
        String projectId = null;
        ProjectUserCreateRequest projectUserCreateRequest = null;
        ProjectUser response = api.createProjectUser(projectId, projectUserCreateRequest);

        // TODO: test validations
    }
    /**
     * Deletes an API key from the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectApiKeyTest() throws ApiException {
        String projectId = null;
        String keyId = null;
        ProjectApiKeyDeleteResponse response = api.deleteProjectApiKey(projectId, keyId);

        // TODO: test validations
    }
    /**
     * Deletes a service account from the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectServiceAccountTest() throws ApiException {
        String projectId = null;
        String serviceAccountId = null;
        ProjectServiceAccountDeleteResponse response = api.deleteProjectServiceAccount(projectId, serviceAccountId);

        // TODO: test validations
    }
    /**
     * Deletes a user from the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectUserTest() throws ApiException {
        String projectId = null;
        String userId = null;
        ProjectUserDeleteResponse response = api.deleteProjectUser(projectId, userId);

        // TODO: test validations
    }
    /**
     * Returns a list of API keys in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectApiKeysTest() throws ApiException {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectApiKeyListResponse response = api.listProjectApiKeys(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns the rate limits per model for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectRateLimitsTest() throws ApiException {
        String projectId = null;
        Integer limit = null;
        String after = null;
        String before = null;
        ProjectRateLimitListResponse response = api.listProjectRateLimits(projectId, limit, after, before);

        // TODO: test validations
    }
    /**
     * Returns a list of service accounts in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectServiceAccountsTest() throws ApiException {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectServiceAccountListResponse response = api.listProjectServiceAccounts(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns a list of users in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectUsersTest() throws ApiException {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectUserListResponse response = api.listProjectUsers(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns a list of projects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        Integer limit = null;
        String after = null;
        Boolean includeArchived = null;
        ProjectListResponse response = api.listProjects(limit, after, includeArchived);

        // TODO: test validations
    }
    /**
     * Modifies a project in the organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyProjectTest() throws ApiException {
        String projectId = null;
        ProjectUpdateRequest projectUpdateRequest = null;
        Project response = api.modifyProject(projectId, projectUpdateRequest);

        // TODO: test validations
    }
    /**
     * Modifies a user&#39;s role in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyProjectUserTest() throws ApiException {
        String projectId = null;
        String userId = null;
        ProjectUserUpdateRequest projectUserUpdateRequest = null;
        ProjectUser response = api.modifyProjectUser(projectId, userId, projectUserUpdateRequest);

        // TODO: test validations
    }
    /**
     * Retrieves a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectTest() throws ApiException {
        String projectId = null;
        Project response = api.retrieveProject(projectId);

        // TODO: test validations
    }
    /**
     * Retrieves an API key in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectApiKeyTest() throws ApiException {
        String projectId = null;
        String keyId = null;
        ProjectApiKey response = api.retrieveProjectApiKey(projectId, keyId);

        // TODO: test validations
    }
    /**
     * Retrieves a service account in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectServiceAccountTest() throws ApiException {
        String projectId = null;
        String serviceAccountId = null;
        ProjectServiceAccount response = api.retrieveProjectServiceAccount(projectId, serviceAccountId);

        // TODO: test validations
    }
    /**
     * Retrieves a user in the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectUserTest() throws ApiException {
        String projectId = null;
        String userId = null;
        ProjectUser response = api.retrieveProjectUser(projectId, userId);

        // TODO: test validations
    }
    /**
     * Updates a project rate limit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectRateLimitsTest() throws ApiException {
        String projectId = null;
        String rateLimitId = null;
        ProjectRateLimitUpdateRequest projectRateLimitUpdateRequest = null;
        ProjectRateLimit response = api.updateProjectRateLimits(projectId, rateLimitId, projectRateLimitUpdateRequest);

        // TODO: test validations
    }
}
