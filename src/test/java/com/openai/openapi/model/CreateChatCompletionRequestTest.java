/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openai.openapi.model.ChatCompletionFunctions;
import com.openai.openapi.model.ChatCompletionRequestMessage;
import com.openai.openapi.model.ChatCompletionStreamOptions;
import com.openai.openapi.model.ChatCompletionTool;
import com.openai.openapi.model.ChatCompletionToolChoiceOption;
import com.openai.openapi.model.CreateChatCompletionRequestAudio;
import com.openai.openapi.model.CreateChatCompletionRequestFunctionCall;
import com.openai.openapi.model.CreateChatCompletionRequestModel;
import com.openai.openapi.model.CreateChatCompletionRequestPrediction;
import com.openai.openapi.model.CreateChatCompletionRequestResponseFormat;
import com.openai.openapi.model.CreateChatCompletionRequestStop;
import com.openai.openapi.model.ReasoningEffort;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateChatCompletionRequest
 */
class CreateChatCompletionRequestTest {
    private final CreateChatCompletionRequest model = new CreateChatCompletionRequest();

    /**
     * Model tests for CreateChatCompletionRequest
     */
    @Test
    void testCreateChatCompletionRequest() {
        // TODO: test CreateChatCompletionRequest
    }

    /**
     * Test the property 'messages'
     */
    @Test
    void messagesTest() {
        // TODO: test messages
    }

    /**
     * Test the property 'model'
     */
    @Test
    void modelTest() {
        // TODO: test model
    }

    /**
     * Test the property 'store'
     */
    @Test
    void storeTest() {
        // TODO: test store
    }

    /**
     * Test the property 'reasoningEffort'
     */
    @Test
    void reasoningEffortTest() {
        // TODO: test reasoningEffort
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'frequencyPenalty'
     */
    @Test
    void frequencyPenaltyTest() {
        // TODO: test frequencyPenalty
    }

    /**
     * Test the property 'logitBias'
     */
    @Test
    void logitBiasTest() {
        // TODO: test logitBias
    }

    /**
     * Test the property 'logprobs'
     */
    @Test
    void logprobsTest() {
        // TODO: test logprobs
    }

    /**
     * Test the property 'topLogprobs'
     */
    @Test
    void topLogprobsTest() {
        // TODO: test topLogprobs
    }

    /**
     * Test the property 'maxTokens'
     */
    @Test
    void maxTokensTest() {
        // TODO: test maxTokens
    }

    /**
     * Test the property 'maxCompletionTokens'
     */
    @Test
    void maxCompletionTokensTest() {
        // TODO: test maxCompletionTokens
    }

    /**
     * Test the property 'n'
     */
    @Test
    void nTest() {
        // TODO: test n
    }

    /**
     * Test the property 'modalities'
     */
    @Test
    void modalitiesTest() {
        // TODO: test modalities
    }

    /**
     * Test the property 'prediction'
     */
    @Test
    void predictionTest() {
        // TODO: test prediction
    }

    /**
     * Test the property 'audio'
     */
    @Test
    void audioTest() {
        // TODO: test audio
    }

    /**
     * Test the property 'presencePenalty'
     */
    @Test
    void presencePenaltyTest() {
        // TODO: test presencePenalty
    }

    /**
     * Test the property 'responseFormat'
     */
    @Test
    void responseFormatTest() {
        // TODO: test responseFormat
    }

    /**
     * Test the property 'seed'
     */
    @Test
    void seedTest() {
        // TODO: test seed
    }

    /**
     * Test the property 'serviceTier'
     */
    @Test
    void serviceTierTest() {
        // TODO: test serviceTier
    }

    /**
     * Test the property 'stop'
     */
    @Test
    void stopTest() {
        // TODO: test stop
    }

    /**
     * Test the property 'stream'
     */
    @Test
    void streamTest() {
        // TODO: test stream
    }

    /**
     * Test the property 'streamOptions'
     */
    @Test
    void streamOptionsTest() {
        // TODO: test streamOptions
    }

    /**
     * Test the property 'temperature'
     */
    @Test
    void temperatureTest() {
        // TODO: test temperature
    }

    /**
     * Test the property 'topP'
     */
    @Test
    void topPTest() {
        // TODO: test topP
    }

    /**
     * Test the property 'tools'
     */
    @Test
    void toolsTest() {
        // TODO: test tools
    }

    /**
     * Test the property 'toolChoice'
     */
    @Test
    void toolChoiceTest() {
        // TODO: test toolChoice
    }

    /**
     * Test the property 'parallelToolCalls'
     */
    @Test
    void parallelToolCallsTest() {
        // TODO: test parallelToolCalls
    }

    /**
     * Test the property 'user'
     */
    @Test
    void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'functionCall'
     */
    @Test
    void functionCallTest() {
        // TODO: test functionCall
    }

    /**
     * Test the property 'functions'
     */
    @Test
    void functionsTest() {
        // TODO: test functions
    }

}
