/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.BaseApi;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AdminApiKey;
import org.openapitools.client.model.AdminApiKeysCreateRequest;
import org.openapitools.client.model.AdminApiKeysDelete200Response;
import org.openapitools.client.model.ApiKeyList;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class DefaultApi extends BaseApi {

  public DefaultApi() {
    super(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create an organization admin API key
   * Create a new admin-level API key for the organization.
   * @param adminApiKeysCreateRequest  (required)
   * @return AdminApiKey
   * @throws ApiException if fails to make API call
   */
  public AdminApiKey adminApiKeysCreate(AdminApiKeysCreateRequest adminApiKeysCreateRequest) throws ApiException {
    return this.adminApiKeysCreate(adminApiKeysCreateRequest, Collections.emptyMap());
  }


  /**
   * Create an organization admin API key
   * Create a new admin-level API key for the organization.
   * @param adminApiKeysCreateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AdminApiKey
   * @throws ApiException if fails to make API call
   */
  public AdminApiKey adminApiKeysCreate(AdminApiKeysCreateRequest adminApiKeysCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = adminApiKeysCreateRequest;
    
    // verify the required parameter 'adminApiKeysCreateRequest' is set
    if (adminApiKeysCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'adminApiKeysCreateRequest' when calling adminApiKeysCreate");
    }
    
    // create path and map variables
    String localVarPath = "/organization/admin_api_keys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<AdminApiKey> localVarReturnType = new TypeReference<AdminApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an organization admin API key
   * Delete the specified admin API key.
   * @param keyId  (required)
   * @return AdminApiKeysDelete200Response
   * @throws ApiException if fails to make API call
   */
  public AdminApiKeysDelete200Response adminApiKeysDelete(String keyId) throws ApiException {
    return this.adminApiKeysDelete(keyId, Collections.emptyMap());
  }


  /**
   * Delete an organization admin API key
   * Delete the specified admin API key.
   * @param keyId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AdminApiKeysDelete200Response
   * @throws ApiException if fails to make API call
   */
  public AdminApiKeysDelete200Response adminApiKeysDelete(String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling adminApiKeysDelete");
    }
    
    // create path and map variables
    String localVarPath = "/organization/admin_api_keys/{key_id}"
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(keyId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<AdminApiKeysDelete200Response> localVarReturnType = new TypeReference<AdminApiKeysDelete200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve a single organization API key
   * Get details for a specific organization API key by its ID.
   * @param keyId  (required)
   * @return AdminApiKey
   * @throws ApiException if fails to make API call
   */
  public AdminApiKey adminApiKeysGet(String keyId) throws ApiException {
    return this.adminApiKeysGet(keyId, Collections.emptyMap());
  }


  /**
   * Retrieve a single organization API key
   * Get details for a specific organization API key by its ID.
   * @param keyId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return AdminApiKey
   * @throws ApiException if fails to make API call
   */
  public AdminApiKey adminApiKeysGet(String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling adminApiKeysGet");
    }
    
    // create path and map variables
    String localVarPath = "/organization/admin_api_keys/{key_id}"
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(keyId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<AdminApiKey> localVarReturnType = new TypeReference<AdminApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List organization API keys
   * Retrieve a paginated list of organization admin API keys.
   * @param after  (optional)
   * @param order  (optional, default to asc)
   * @param limit  (optional, default to 20)
   * @return ApiKeyList
   * @throws ApiException if fails to make API call
   */
  public ApiKeyList adminApiKeysList(String after, String order, Integer limit) throws ApiException {
    return this.adminApiKeysList(after, order, limit, Collections.emptyMap());
  }


  /**
   * List organization API keys
   * Retrieve a paginated list of organization admin API keys.
   * @param after  (optional)
   * @param order  (optional, default to asc)
   * @param limit  (optional, default to 20)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKeyList
   * @throws ApiException if fails to make API call
   */
  public ApiKeyList adminApiKeysList(String after, String order, Integer limit, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/organization/admin_api_keys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ApiKeyList> localVarReturnType = new TypeReference<ApiKeyList>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
