/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.BaseApi;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectApiKey;
import org.openapitools.client.model.ProjectApiKeyDeleteResponse;
import org.openapitools.client.model.ProjectApiKeyListResponse;
import org.openapitools.client.model.ProjectCreateRequest;
import org.openapitools.client.model.ProjectListResponse;
import org.openapitools.client.model.ProjectRateLimit;
import org.openapitools.client.model.ProjectRateLimitListResponse;
import org.openapitools.client.model.ProjectRateLimitUpdateRequest;
import org.openapitools.client.model.ProjectServiceAccount;
import org.openapitools.client.model.ProjectServiceAccountCreateRequest;
import org.openapitools.client.model.ProjectServiceAccountCreateResponse;
import org.openapitools.client.model.ProjectServiceAccountDeleteResponse;
import org.openapitools.client.model.ProjectServiceAccountListResponse;
import org.openapitools.client.model.ProjectUpdateRequest;
import org.openapitools.client.model.ProjectUser;
import org.openapitools.client.model.ProjectUserCreateRequest;
import org.openapitools.client.model.ProjectUserDeleteResponse;
import org.openapitools.client.model.ProjectUserListResponse;
import org.openapitools.client.model.ProjectUserUpdateRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-14T12:15:51.997600814-05:00[US/Eastern]", comments = "Generator version: 7.10.0")
public class ProjectsApi extends BaseApi {

  public ProjectsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ProjectsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Archives a project in the organization. Archived projects cannot be used or updated.
   * 
   * @param projectId The ID of the project. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project archiveProject(String projectId) throws ApiException {
    return this.archiveProject(projectId, Collections.emptyMap());
  }


  /**
   * Archives a project in the organization. Archived projects cannot be used or updated.
   * 
   * @param projectId The ID of the project. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project archiveProject(String projectId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling archiveProject");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/archive"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<Project> localVarReturnType = new TypeReference<Project>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
   * 
   * @param projectCreateRequest The project create request payload. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project createProject(ProjectCreateRequest projectCreateRequest) throws ApiException {
    return this.createProject(projectCreateRequest, Collections.emptyMap());
  }


  /**
   * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
   * 
   * @param projectCreateRequest The project create request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project createProject(ProjectCreateRequest projectCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectCreateRequest;
    
    // verify the required parameter 'projectCreateRequest' is set
    if (projectCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCreateRequest' when calling createProject");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<Project> localVarReturnType = new TypeReference<Project>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Creates a new service account in the project. This also returns an unredacted API key for the service account.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
   * @return ProjectServiceAccountCreateResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountCreateResponse createProjectServiceAccount(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest) throws ApiException {
    return this.createProjectServiceAccount(projectId, projectServiceAccountCreateRequest, Collections.emptyMap());
  }


  /**
   * Creates a new service account in the project. This also returns an unredacted API key for the service account.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectServiceAccountCreateResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountCreateResponse createProjectServiceAccount(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectServiceAccountCreateRequest;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling createProjectServiceAccount");
    }
    
    // verify the required parameter 'projectServiceAccountCreateRequest' is set
    if (projectServiceAccountCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectServiceAccountCreateRequest' when calling createProjectServiceAccount");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/service_accounts"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectServiceAccountCreateResponse> localVarReturnType = new TypeReference<ProjectServiceAccountCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Adds a user to the project. Users must already be members of the organization to be added to a project.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectUserCreateRequest The project user create request payload. (required)
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser createProjectUser(String projectId, ProjectUserCreateRequest projectUserCreateRequest) throws ApiException {
    return this.createProjectUser(projectId, projectUserCreateRequest, Collections.emptyMap());
  }


  /**
   * Adds a user to the project. Users must already be members of the organization to be added to a project.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectUserCreateRequest The project user create request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser createProjectUser(String projectId, ProjectUserCreateRequest projectUserCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectUserCreateRequest;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling createProjectUser");
    }
    
    // verify the required parameter 'projectUserCreateRequest' is set
    if (projectUserCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectUserCreateRequest' when calling createProjectUser");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/users"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectUser> localVarReturnType = new TypeReference<ProjectUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deletes an API key from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param keyId The ID of the API key. (required)
   * @return ProjectApiKeyDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKeyDeleteResponse deleteProjectApiKey(String projectId, String keyId) throws ApiException {
    return this.deleteProjectApiKey(projectId, keyId, Collections.emptyMap());
  }


  /**
   * Deletes an API key from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param keyId The ID of the API key. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectApiKeyDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKeyDeleteResponse deleteProjectApiKey(String projectId, String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteProjectApiKey");
    }
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling deleteProjectApiKey");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/api_keys/{key_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(keyId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectApiKeyDeleteResponse> localVarReturnType = new TypeReference<ProjectApiKeyDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deletes a service account from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param serviceAccountId The ID of the service account. (required)
   * @return ProjectServiceAccountDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountDeleteResponse deleteProjectServiceAccount(String projectId, String serviceAccountId) throws ApiException {
    return this.deleteProjectServiceAccount(projectId, serviceAccountId, Collections.emptyMap());
  }


  /**
   * Deletes a service account from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param serviceAccountId The ID of the service account. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectServiceAccountDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountDeleteResponse deleteProjectServiceAccount(String projectId, String serviceAccountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteProjectServiceAccount");
    }
    
    // verify the required parameter 'serviceAccountId' is set
    if (serviceAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceAccountId' when calling deleteProjectServiceAccount");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "service_account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(serviceAccountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectServiceAccountDeleteResponse> localVarReturnType = new TypeReference<ProjectServiceAccountDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deletes a user from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @return ProjectUserDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectUserDeleteResponse deleteProjectUser(String projectId, String userId) throws ApiException {
    return this.deleteProjectUser(projectId, userId, Collections.emptyMap());
  }


  /**
   * Deletes a user from the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectUserDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectUserDeleteResponse deleteProjectUser(String projectId, String userId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteProjectUser");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling deleteProjectUser");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectUserDeleteResponse> localVarReturnType = new TypeReference<ProjectUserDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of API keys in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @return ProjectApiKeyListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKeyListResponse listProjectApiKeys(String projectId, Integer limit, String after) throws ApiException {
    return this.listProjectApiKeys(projectId, limit, after, Collections.emptyMap());
  }


  /**
   * Returns a list of API keys in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectApiKeyListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKeyListResponse listProjectApiKeys(String projectId, Integer limit, String after, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling listProjectApiKeys");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/api_keys"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectApiKeyListResponse> localVarReturnType = new TypeReference<ProjectApiKeyListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns the rate limits per model for a project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. The default is 100.  (optional, default to 100)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @return ProjectRateLimitListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectRateLimitListResponse listProjectRateLimits(String projectId, Integer limit, String after, String before) throws ApiException {
    return this.listProjectRateLimits(projectId, limit, after, before, Collections.emptyMap());
  }


  /**
   * Returns the rate limits per model for a project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. The default is 100.  (optional, default to 100)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectRateLimitListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectRateLimitListResponse listProjectRateLimits(String projectId, Integer limit, String after, String before, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling listProjectRateLimits");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/rate_limits"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectRateLimitListResponse> localVarReturnType = new TypeReference<ProjectRateLimitListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of service accounts in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @return ProjectServiceAccountListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountListResponse listProjectServiceAccounts(String projectId, Integer limit, String after) throws ApiException {
    return this.listProjectServiceAccounts(projectId, limit, after, Collections.emptyMap());
  }


  /**
   * Returns a list of service accounts in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectServiceAccountListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccountListResponse listProjectServiceAccounts(String projectId, Integer limit, String after, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling listProjectServiceAccounts");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/service_accounts"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectServiceAccountListResponse> localVarReturnType = new TypeReference<ProjectServiceAccountListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of users in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @return ProjectUserListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectUserListResponse listProjectUsers(String projectId, Integer limit, String after) throws ApiException {
    return this.listProjectUsers(projectId, limit, after, Collections.emptyMap());
  }


  /**
   * Returns a list of users in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectUserListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectUserListResponse listProjectUsers(String projectId, Integer limit, String after, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling listProjectUsers");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/users"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectUserListResponse> localVarReturnType = new TypeReference<ProjectUserListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of projects.
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
   * @return ProjectListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectListResponse listProjects(Integer limit, String after, Boolean includeArchived) throws ApiException {
    return this.listProjects(limit, after, includeArchived, Collections.emptyMap());
  }


  /**
   * Returns a list of projects.
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectListResponse
   * @throws ApiException if fails to make API call
   */
  public ProjectListResponse listProjects(Integer limit, String after, Boolean includeArchived, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/organization/projects";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("include_archived", includeArchived));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectListResponse> localVarReturnType = new TypeReference<ProjectListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Modifies a project in the organization.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectUpdateRequest The project update request payload. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project modifyProject(String projectId, ProjectUpdateRequest projectUpdateRequest) throws ApiException {
    return this.modifyProject(projectId, projectUpdateRequest, Collections.emptyMap());
  }


  /**
   * Modifies a project in the organization.
   * 
   * @param projectId The ID of the project. (required)
   * @param projectUpdateRequest The project update request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project modifyProject(String projectId, ProjectUpdateRequest projectUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectUpdateRequest;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling modifyProject");
    }
    
    // verify the required parameter 'projectUpdateRequest' is set
    if (projectUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectUpdateRequest' when calling modifyProject");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<Project> localVarReturnType = new TypeReference<Project>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Modifies a user&#39;s role in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @param projectUserUpdateRequest The project user update request payload. (required)
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser modifyProjectUser(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest) throws ApiException {
    return this.modifyProjectUser(projectId, userId, projectUserUpdateRequest, Collections.emptyMap());
  }


  /**
   * Modifies a user&#39;s role in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @param projectUserUpdateRequest The project user update request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser modifyProjectUser(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectUserUpdateRequest;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling modifyProjectUser");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling modifyProjectUser");
    }
    
    // verify the required parameter 'projectUserUpdateRequest' is set
    if (projectUserUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectUserUpdateRequest' when calling modifyProjectUser");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectUser> localVarReturnType = new TypeReference<ProjectUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a project.
   * 
   * @param projectId The ID of the project. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project retrieveProject(String projectId) throws ApiException {
    return this.retrieveProject(projectId, Collections.emptyMap());
  }


  /**
   * Retrieves a project.
   * 
   * @param projectId The ID of the project. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project retrieveProject(String projectId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling retrieveProject");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<Project> localVarReturnType = new TypeReference<Project>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves an API key in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param keyId The ID of the API key. (required)
   * @return ProjectApiKey
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKey retrieveProjectApiKey(String projectId, String keyId) throws ApiException {
    return this.retrieveProjectApiKey(projectId, keyId, Collections.emptyMap());
  }


  /**
   * Retrieves an API key in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param keyId The ID of the API key. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectApiKey
   * @throws ApiException if fails to make API call
   */
  public ProjectApiKey retrieveProjectApiKey(String projectId, String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling retrieveProjectApiKey");
    }
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling retrieveProjectApiKey");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/api_keys/{key_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(keyId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectApiKey> localVarReturnType = new TypeReference<ProjectApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a service account in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param serviceAccountId The ID of the service account. (required)
   * @return ProjectServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccount retrieveProjectServiceAccount(String projectId, String serviceAccountId) throws ApiException {
    return this.retrieveProjectServiceAccount(projectId, serviceAccountId, Collections.emptyMap());
  }


  /**
   * Retrieves a service account in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param serviceAccountId The ID of the service account. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectServiceAccount
   * @throws ApiException if fails to make API call
   */
  public ProjectServiceAccount retrieveProjectServiceAccount(String projectId, String serviceAccountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling retrieveProjectServiceAccount");
    }
    
    // verify the required parameter 'serviceAccountId' is set
    if (serviceAccountId == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceAccountId' when calling retrieveProjectServiceAccount");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "service_account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(serviceAccountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectServiceAccount> localVarReturnType = new TypeReference<ProjectServiceAccount>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a user in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser retrieveProjectUser(String projectId, String userId) throws ApiException {
    return this.retrieveProjectUser(projectId, userId, Collections.emptyMap());
  }


  /**
   * Retrieves a user in the project.
   * 
   * @param projectId The ID of the project. (required)
   * @param userId The ID of the user. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectUser
   * @throws ApiException if fails to make API call
   */
  public ProjectUser retrieveProjectUser(String projectId, String userId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling retrieveProjectUser");
    }
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling retrieveProjectUser");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(userId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectUser> localVarReturnType = new TypeReference<ProjectUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Updates a project rate limit.
   * 
   * @param projectId The ID of the project. (required)
   * @param rateLimitId The ID of the rate limit. (required)
   * @param projectRateLimitUpdateRequest The project rate limit update request payload. (required)
   * @return ProjectRateLimit
   * @throws ApiException if fails to make API call
   */
  public ProjectRateLimit updateProjectRateLimits(String projectId, String rateLimitId, ProjectRateLimitUpdateRequest projectRateLimitUpdateRequest) throws ApiException {
    return this.updateProjectRateLimits(projectId, rateLimitId, projectRateLimitUpdateRequest, Collections.emptyMap());
  }


  /**
   * Updates a project rate limit.
   * 
   * @param projectId The ID of the project. (required)
   * @param rateLimitId The ID of the rate limit. (required)
   * @param projectRateLimitUpdateRequest The project rate limit update request payload. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProjectRateLimit
   * @throws ApiException if fails to make API call
   */
  public ProjectRateLimit updateProjectRateLimits(String projectId, String rateLimitId, ProjectRateLimitUpdateRequest projectRateLimitUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = projectRateLimitUpdateRequest;
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling updateProjectRateLimits");
    }
    
    // verify the required parameter 'rateLimitId' is set
    if (rateLimitId == null) {
      throw new ApiException(400, "Missing the required parameter 'rateLimitId' when calling updateProjectRateLimits");
    }
    
    // verify the required parameter 'projectRateLimitUpdateRequest' is set
    if (projectRateLimitUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'projectRateLimitUpdateRequest' when calling updateProjectRateLimits");
    }
    
    // create path and map variables
    String localVarPath = "/organization/projects/{project_id}/rate_limits/{rate_limit_id}"
      .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(projectId)))
      .replaceAll("\\{" + "rate_limit_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(rateLimitId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ProjectRateLimit> localVarReturnType = new TypeReference<ProjectRateLimit>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
