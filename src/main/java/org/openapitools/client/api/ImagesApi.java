/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.BaseApi;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CreateImageEditRequestModel;
import org.openapitools.client.model.CreateImageRequest;
import java.io.File;
import org.openapitools.client.model.ImagesResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class ImagesApi extends BaseApi {

  public ImagesApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ImagesApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Creates an image given a prompt.
   * 
   * @param createImageRequest  (required)
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImage(CreateImageRequest createImageRequest) throws ApiException {
    return this.createImage(createImageRequest, Collections.emptyMap());
  }


  /**
   * Creates an image given a prompt.
   * 
   * @param createImageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImage(CreateImageRequest createImageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createImageRequest;
    
    // verify the required parameter 'createImageRequest' is set
    if (createImageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createImageRequest' when calling createImage");
    }
    
    // create path and map variables
    String localVarPath = "/images/generations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ImagesResponse> localVarReturnType = new TypeReference<ImagesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Creates an edited or extended image given an original image and a prompt.
   * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
   * @param model  (optional, default to dall-e-2)
   * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).  (optional)
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImageEdit(File image, String prompt, File mask, CreateImageEditRequestModel model, Integer n, String size, String responseFormat, String user) throws ApiException {
    return this.createImageEdit(image, prompt, mask, model, n, size, responseFormat, user, Collections.emptyMap());
  }


  /**
   * Creates an edited or extended image given an original image and a prompt.
   * 
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
   * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
   * @param model  (optional, default to dall-e-2)
   * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImageEdit(File image, String prompt, File mask, CreateImageEditRequestModel model, Integer n, String size, String responseFormat, String user, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'image' is set
    if (image == null) {
      throw new ApiException(400, "Missing the required parameter 'image' when calling createImageEdit");
    }
    
    // verify the required parameter 'prompt' is set
    if (prompt == null) {
      throw new ApiException(400, "Missing the required parameter 'prompt' when calling createImageEdit");
    }
    
    // create path and map variables
    String localVarPath = "/images/edits";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (image != null)
      localVarFormParams.put("image", image);
if (prompt != null)
      localVarFormParams.put("prompt", prompt);
if (mask != null)
      localVarFormParams.put("mask", mask);
if (model != null)
      localVarFormParams.put("model", model);
if (n != null)
      localVarFormParams.put("n", n);
if (size != null)
      localVarFormParams.put("size", size);
if (responseFormat != null)
      localVarFormParams.put("response_format", responseFormat);
if (user != null)
      localVarFormParams.put("user", user);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ImagesResponse> localVarReturnType = new TypeReference<ImagesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Creates a variation of a given image.
   * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
   * @param model  (optional, default to dall-e-2)
   * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).  (optional)
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImageVariation(File image, CreateImageEditRequestModel model, Integer n, String responseFormat, String size, String user) throws ApiException {
    return this.createImageVariation(image, model, n, responseFormat, size, user, Collections.emptyMap());
  }


  /**
   * Creates a variation of a given image.
   * 
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
   * @param model  (optional, default to dall-e-2)
   * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
   * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to url)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ImagesResponse
   * @throws ApiException if fails to make API call
   */
  public ImagesResponse createImageVariation(File image, CreateImageEditRequestModel model, Integer n, String responseFormat, String size, String user, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'image' is set
    if (image == null) {
      throw new ApiException(400, "Missing the required parameter 'image' when calling createImageVariation");
    }
    
    // create path and map variables
    String localVarPath = "/images/variations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (image != null)
      localVarFormParams.put("image", image);
if (model != null)
      localVarFormParams.put("model", model);
if (n != null)
      localVarFormParams.put("n", n);
if (responseFormat != null)
      localVarFormParams.put("response_format", responseFormat);
if (size != null)
      localVarFormParams.put("size", size);
if (user != null)
      localVarFormParams.put("user", user);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ImagesResponse> localVarReturnType = new TypeReference<ImagesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
