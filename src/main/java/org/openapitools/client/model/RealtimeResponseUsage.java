/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.RealtimeResponseUsageInputTokenDetails;
import org.openapitools.client.model.RealtimeResponseUsageOutputTokenDetails;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Usage statistics for the Response, this will correspond to billing. A Realtime API session will maintain a conversation context and append new Items to the Conversation, thus output from previous turns (text and audio tokens) will become the input for later turns. 
 */
@JsonPropertyOrder({
  RealtimeResponseUsage.JSON_PROPERTY_TOTAL_TOKENS,
  RealtimeResponseUsage.JSON_PROPERTY_INPUT_TOKENS,
  RealtimeResponseUsage.JSON_PROPERTY_OUTPUT_TOKENS,
  RealtimeResponseUsage.JSON_PROPERTY_INPUT_TOKEN_DETAILS,
  RealtimeResponseUsage.JSON_PROPERTY_OUTPUT_TOKEN_DETAILS
})
@JsonTypeName("RealtimeResponse_usage")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class RealtimeResponseUsage {
  public static final String JSON_PROPERTY_TOTAL_TOKENS = "total_tokens";
  @javax.annotation.Nullable
  private Integer totalTokens;

  public static final String JSON_PROPERTY_INPUT_TOKENS = "input_tokens";
  @javax.annotation.Nullable
  private Integer inputTokens;

  public static final String JSON_PROPERTY_OUTPUT_TOKENS = "output_tokens";
  @javax.annotation.Nullable
  private Integer outputTokens;

  public static final String JSON_PROPERTY_INPUT_TOKEN_DETAILS = "input_token_details";
  @javax.annotation.Nullable
  private RealtimeResponseUsageInputTokenDetails inputTokenDetails;

  public static final String JSON_PROPERTY_OUTPUT_TOKEN_DETAILS = "output_token_details";
  @javax.annotation.Nullable
  private RealtimeResponseUsageOutputTokenDetails outputTokenDetails;

  public RealtimeResponseUsage() {
  }

  public RealtimeResponseUsage totalTokens(@javax.annotation.Nullable Integer totalTokens) {
    
    this.totalTokens = totalTokens;
    return this;
  }

  /**
   * The total number of tokens in the Response including input and output text and audio tokens. 
   * @return totalTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalTokens() {
    return totalTokens;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalTokens(@javax.annotation.Nullable Integer totalTokens) {
    this.totalTokens = totalTokens;
  }

  public RealtimeResponseUsage inputTokens(@javax.annotation.Nullable Integer inputTokens) {
    
    this.inputTokens = inputTokens;
    return this;
  }

  /**
   * The number of input tokens used in the Response, including text and audio tokens. 
   * @return inputTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInputTokens() {
    return inputTokens;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputTokens(@javax.annotation.Nullable Integer inputTokens) {
    this.inputTokens = inputTokens;
  }

  public RealtimeResponseUsage outputTokens(@javax.annotation.Nullable Integer outputTokens) {
    
    this.outputTokens = outputTokens;
    return this;
  }

  /**
   * The number of output tokens sent in the Response, including text and audio tokens. 
   * @return outputTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOutputTokens() {
    return outputTokens;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputTokens(@javax.annotation.Nullable Integer outputTokens) {
    this.outputTokens = outputTokens;
  }

  public RealtimeResponseUsage inputTokenDetails(@javax.annotation.Nullable RealtimeResponseUsageInputTokenDetails inputTokenDetails) {
    
    this.inputTokenDetails = inputTokenDetails;
    return this;
  }

  /**
   * Get inputTokenDetails
   * @return inputTokenDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_TOKEN_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RealtimeResponseUsageInputTokenDetails getInputTokenDetails() {
    return inputTokenDetails;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TOKEN_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputTokenDetails(@javax.annotation.Nullable RealtimeResponseUsageInputTokenDetails inputTokenDetails) {
    this.inputTokenDetails = inputTokenDetails;
  }

  public RealtimeResponseUsage outputTokenDetails(@javax.annotation.Nullable RealtimeResponseUsageOutputTokenDetails outputTokenDetails) {
    
    this.outputTokenDetails = outputTokenDetails;
    return this;
  }

  /**
   * Get outputTokenDetails
   * @return outputTokenDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKEN_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RealtimeResponseUsageOutputTokenDetails getOutputTokenDetails() {
    return outputTokenDetails;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKEN_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputTokenDetails(@javax.annotation.Nullable RealtimeResponseUsageOutputTokenDetails outputTokenDetails) {
    this.outputTokenDetails = outputTokenDetails;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeResponseUsage realtimeResponseUsage = (RealtimeResponseUsage) o;
    return Objects.equals(this.totalTokens, realtimeResponseUsage.totalTokens) &&
        Objects.equals(this.inputTokens, realtimeResponseUsage.inputTokens) &&
        Objects.equals(this.outputTokens, realtimeResponseUsage.outputTokens) &&
        Objects.equals(this.inputTokenDetails, realtimeResponseUsage.inputTokenDetails) &&
        Objects.equals(this.outputTokenDetails, realtimeResponseUsage.outputTokenDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalTokens, inputTokens, outputTokens, inputTokenDetails, outputTokenDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeResponseUsage {\n");
    sb.append("    totalTokens: ").append(toIndentedString(totalTokens)).append("\n");
    sb.append("    inputTokens: ").append(toIndentedString(inputTokens)).append("\n");
    sb.append("    outputTokens: ").append(toIndentedString(outputTokens)).append("\n");
    sb.append("    inputTokenDetails: ").append(toIndentedString(inputTokenDetails)).append("\n");
    sb.append("    outputTokenDetails: ").append(toIndentedString(outputTokenDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `total_tokens` to the URL query string
    if (getTotalTokens() != null) {
      try {
        joiner.add(String.format("%stotal_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_tokens` to the URL query string
    if (getInputTokens() != null) {
      try {
        joiner.add(String.format("%sinput_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output_tokens` to the URL query string
    if (getOutputTokens() != null) {
      try {
        joiner.add(String.format("%soutput_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_token_details` to the URL query string
    if (getInputTokenDetails() != null) {
      joiner.add(getInputTokenDetails().toUrlQueryString(prefix + "input_token_details" + suffix));
    }

    // add `output_token_details` to the URL query string
    if (getOutputTokenDetails() != null) {
      joiner.add(getOutputTokenDetails().toUrlQueryString(prefix + "output_token_details" + suffix));
    }

    return joiner.toString();
  }

}

