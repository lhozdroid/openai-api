/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A list of the categories along with the input type(s) that the score applies to.
 */
@JsonPropertyOrder({
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_HATE,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_HATE_THREATENING,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_HARASSMENT,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_HARASSMENT_THREATENING,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_ILLICIT,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_ILLICIT_VIOLENT,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_SELF_HARM,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_SELF_HARM_INTENT,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_SELF_HARM_INSTRUCTIONS,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_SEXUAL,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_SEXUAL_MINORS,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_VIOLENCE,
  CreateModerationResponseResultsInnerCategoryAppliedInputTypes.JSON_PROPERTY_VIOLENCE_GRAPHIC
})
@JsonTypeName("CreateModerationResponse_results_inner_category_applied_input_types")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
  /**
   * Gets or Sets hate
   */
  public enum HateEnum {
    TEXT(String.valueOf("text"));

    private String value;

    HateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HateEnum fromValue(String value) {
      for (HateEnum b : HateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HATE = "hate";
  @javax.annotation.Nonnull
  private List<HateEnum> hate = new ArrayList<>();

  /**
   * Gets or Sets hateThreatening
   */
  public enum HateThreateningEnum {
    TEXT(String.valueOf("text"));

    private String value;

    HateThreateningEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HateThreateningEnum fromValue(String value) {
      for (HateThreateningEnum b : HateThreateningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HATE_THREATENING = "hate/threatening";
  @javax.annotation.Nonnull
  private List<HateThreateningEnum> hateThreatening = new ArrayList<>();

  /**
   * Gets or Sets harassment
   */
  public enum HarassmentEnum {
    TEXT(String.valueOf("text"));

    private String value;

    HarassmentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HarassmentEnum fromValue(String value) {
      for (HarassmentEnum b : HarassmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HARASSMENT = "harassment";
  @javax.annotation.Nonnull
  private List<HarassmentEnum> harassment = new ArrayList<>();

  /**
   * Gets or Sets harassmentThreatening
   */
  public enum HarassmentThreateningEnum {
    TEXT(String.valueOf("text"));

    private String value;

    HarassmentThreateningEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HarassmentThreateningEnum fromValue(String value) {
      for (HarassmentThreateningEnum b : HarassmentThreateningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HARASSMENT_THREATENING = "harassment/threatening";
  @javax.annotation.Nonnull
  private List<HarassmentThreateningEnum> harassmentThreatening = new ArrayList<>();

  /**
   * Gets or Sets illicit
   */
  public enum IllicitEnum {
    TEXT(String.valueOf("text"));

    private String value;

    IllicitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IllicitEnum fromValue(String value) {
      for (IllicitEnum b : IllicitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ILLICIT = "illicit";
  @javax.annotation.Nonnull
  private List<IllicitEnum> illicit = new ArrayList<>();

  /**
   * Gets or Sets illicitViolent
   */
  public enum IllicitViolentEnum {
    TEXT(String.valueOf("text"));

    private String value;

    IllicitViolentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IllicitViolentEnum fromValue(String value) {
      for (IllicitViolentEnum b : IllicitViolentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ILLICIT_VIOLENT = "illicit/violent";
  @javax.annotation.Nonnull
  private List<IllicitViolentEnum> illicitViolent = new ArrayList<>();

  /**
   * Gets or Sets selfHarm
   */
  public enum SelfHarmEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    SelfHarmEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelfHarmEnum fromValue(String value) {
      for (SelfHarmEnum b : SelfHarmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SELF_HARM = "self-harm";
  @javax.annotation.Nonnull
  private List<SelfHarmEnum> selfHarm = new ArrayList<>();

  /**
   * Gets or Sets selfHarmIntent
   */
  public enum SelfHarmIntentEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    SelfHarmIntentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelfHarmIntentEnum fromValue(String value) {
      for (SelfHarmIntentEnum b : SelfHarmIntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SELF_HARM_INTENT = "self-harm/intent";
  @javax.annotation.Nonnull
  private List<SelfHarmIntentEnum> selfHarmIntent = new ArrayList<>();

  /**
   * Gets or Sets selfHarmInstructions
   */
  public enum SelfHarmInstructionsEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    SelfHarmInstructionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelfHarmInstructionsEnum fromValue(String value) {
      for (SelfHarmInstructionsEnum b : SelfHarmInstructionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SELF_HARM_INSTRUCTIONS = "self-harm/instructions";
  @javax.annotation.Nonnull
  private List<SelfHarmInstructionsEnum> selfHarmInstructions = new ArrayList<>();

  /**
   * Gets or Sets sexual
   */
  public enum SexualEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    SexualEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SexualEnum fromValue(String value) {
      for (SexualEnum b : SexualEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEXUAL = "sexual";
  @javax.annotation.Nonnull
  private List<SexualEnum> sexual = new ArrayList<>();

  /**
   * Gets or Sets sexualMinors
   */
  public enum SexualMinorsEnum {
    TEXT(String.valueOf("text"));

    private String value;

    SexualMinorsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SexualMinorsEnum fromValue(String value) {
      for (SexualMinorsEnum b : SexualMinorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEXUAL_MINORS = "sexual/minors";
  @javax.annotation.Nonnull
  private List<SexualMinorsEnum> sexualMinors = new ArrayList<>();

  /**
   * Gets or Sets violence
   */
  public enum ViolenceEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    ViolenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViolenceEnum fromValue(String value) {
      for (ViolenceEnum b : ViolenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VIOLENCE = "violence";
  @javax.annotation.Nonnull
  private List<ViolenceEnum> violence = new ArrayList<>();

  /**
   * Gets or Sets violenceGraphic
   */
  public enum ViolenceGraphicEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE(String.valueOf("image"));

    private String value;

    ViolenceGraphicEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViolenceGraphicEnum fromValue(String value) {
      for (ViolenceGraphicEnum b : ViolenceGraphicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VIOLENCE_GRAPHIC = "violence/graphic";
  @javax.annotation.Nonnull
  private List<ViolenceGraphicEnum> violenceGraphic = new ArrayList<>();

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes() {
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes hate(@javax.annotation.Nonnull List<HateEnum> hate) {
    
    this.hate = hate;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHateItem(HateEnum hateItem) {
    if (this.hate == null) {
      this.hate = new ArrayList<>();
    }
    this.hate.add(hateItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;hate&#39;.
   * @return hate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<HateEnum> getHate() {
    return hate;
  }


  @JsonProperty(JSON_PROPERTY_HATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHate(@javax.annotation.Nonnull List<HateEnum> hate) {
    this.hate = hate;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes hateThreatening(@javax.annotation.Nonnull List<HateThreateningEnum> hateThreatening) {
    
    this.hateThreatening = hateThreatening;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHateThreateningItem(HateThreateningEnum hateThreateningItem) {
    if (this.hateThreatening == null) {
      this.hateThreatening = new ArrayList<>();
    }
    this.hateThreatening.add(hateThreateningItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;hate/threatening&#39;.
   * @return hateThreatening
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HATE_THREATENING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<HateThreateningEnum> getHateThreatening() {
    return hateThreatening;
  }


  @JsonProperty(JSON_PROPERTY_HATE_THREATENING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHateThreatening(@javax.annotation.Nonnull List<HateThreateningEnum> hateThreatening) {
    this.hateThreatening = hateThreatening;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes harassment(@javax.annotation.Nonnull List<HarassmentEnum> harassment) {
    
    this.harassment = harassment;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHarassmentItem(HarassmentEnum harassmentItem) {
    if (this.harassment == null) {
      this.harassment = new ArrayList<>();
    }
    this.harassment.add(harassmentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;harassment&#39;.
   * @return harassment
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HARASSMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<HarassmentEnum> getHarassment() {
    return harassment;
  }


  @JsonProperty(JSON_PROPERTY_HARASSMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHarassment(@javax.annotation.Nonnull List<HarassmentEnum> harassment) {
    this.harassment = harassment;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes harassmentThreatening(@javax.annotation.Nonnull List<HarassmentThreateningEnum> harassmentThreatening) {
    
    this.harassmentThreatening = harassmentThreatening;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHarassmentThreateningItem(HarassmentThreateningEnum harassmentThreateningItem) {
    if (this.harassmentThreatening == null) {
      this.harassmentThreatening = new ArrayList<>();
    }
    this.harassmentThreatening.add(harassmentThreateningItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;harassment/threatening&#39;.
   * @return harassmentThreatening
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HARASSMENT_THREATENING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<HarassmentThreateningEnum> getHarassmentThreatening() {
    return harassmentThreatening;
  }


  @JsonProperty(JSON_PROPERTY_HARASSMENT_THREATENING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHarassmentThreatening(@javax.annotation.Nonnull List<HarassmentThreateningEnum> harassmentThreatening) {
    this.harassmentThreatening = harassmentThreatening;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes illicit(@javax.annotation.Nonnull List<IllicitEnum> illicit) {
    
    this.illicit = illicit;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addIllicitItem(IllicitEnum illicitItem) {
    if (this.illicit == null) {
      this.illicit = new ArrayList<>();
    }
    this.illicit.add(illicitItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;illicit&#39;.
   * @return illicit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ILLICIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<IllicitEnum> getIllicit() {
    return illicit;
  }


  @JsonProperty(JSON_PROPERTY_ILLICIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIllicit(@javax.annotation.Nonnull List<IllicitEnum> illicit) {
    this.illicit = illicit;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes illicitViolent(@javax.annotation.Nonnull List<IllicitViolentEnum> illicitViolent) {
    
    this.illicitViolent = illicitViolent;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addIllicitViolentItem(IllicitViolentEnum illicitViolentItem) {
    if (this.illicitViolent == null) {
      this.illicitViolent = new ArrayList<>();
    }
    this.illicitViolent.add(illicitViolentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;illicit/violent&#39;.
   * @return illicitViolent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ILLICIT_VIOLENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<IllicitViolentEnum> getIllicitViolent() {
    return illicitViolent;
  }


  @JsonProperty(JSON_PROPERTY_ILLICIT_VIOLENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIllicitViolent(@javax.annotation.Nonnull List<IllicitViolentEnum> illicitViolent) {
    this.illicitViolent = illicitViolent;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarm(@javax.annotation.Nonnull List<SelfHarmEnum> selfHarm) {
    
    this.selfHarm = selfHarm;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmItem(SelfHarmEnum selfHarmItem) {
    if (this.selfHarm == null) {
      this.selfHarm = new ArrayList<>();
    }
    this.selfHarm.add(selfHarmItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm&#39;.
   * @return selfHarm
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SELF_HARM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SelfHarmEnum> getSelfHarm() {
    return selfHarm;
  }


  @JsonProperty(JSON_PROPERTY_SELF_HARM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSelfHarm(@javax.annotation.Nonnull List<SelfHarmEnum> selfHarm) {
    this.selfHarm = selfHarm;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarmIntent(@javax.annotation.Nonnull List<SelfHarmIntentEnum> selfHarmIntent) {
    
    this.selfHarmIntent = selfHarmIntent;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmIntentItem(SelfHarmIntentEnum selfHarmIntentItem) {
    if (this.selfHarmIntent == null) {
      this.selfHarmIntent = new ArrayList<>();
    }
    this.selfHarmIntent.add(selfHarmIntentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm/intent&#39;.
   * @return selfHarmIntent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SELF_HARM_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SelfHarmIntentEnum> getSelfHarmIntent() {
    return selfHarmIntent;
  }


  @JsonProperty(JSON_PROPERTY_SELF_HARM_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSelfHarmIntent(@javax.annotation.Nonnull List<SelfHarmIntentEnum> selfHarmIntent) {
    this.selfHarmIntent = selfHarmIntent;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarmInstructions(@javax.annotation.Nonnull List<SelfHarmInstructionsEnum> selfHarmInstructions) {
    
    this.selfHarmInstructions = selfHarmInstructions;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmInstructionsItem(SelfHarmInstructionsEnum selfHarmInstructionsItem) {
    if (this.selfHarmInstructions == null) {
      this.selfHarmInstructions = new ArrayList<>();
    }
    this.selfHarmInstructions.add(selfHarmInstructionsItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm/instructions&#39;.
   * @return selfHarmInstructions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SELF_HARM_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SelfHarmInstructionsEnum> getSelfHarmInstructions() {
    return selfHarmInstructions;
  }


  @JsonProperty(JSON_PROPERTY_SELF_HARM_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSelfHarmInstructions(@javax.annotation.Nonnull List<SelfHarmInstructionsEnum> selfHarmInstructions) {
    this.selfHarmInstructions = selfHarmInstructions;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes sexual(@javax.annotation.Nonnull List<SexualEnum> sexual) {
    
    this.sexual = sexual;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSexualItem(SexualEnum sexualItem) {
    if (this.sexual == null) {
      this.sexual = new ArrayList<>();
    }
    this.sexual.add(sexualItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;sexual&#39;.
   * @return sexual
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEXUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SexualEnum> getSexual() {
    return sexual;
  }


  @JsonProperty(JSON_PROPERTY_SEXUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSexual(@javax.annotation.Nonnull List<SexualEnum> sexual) {
    this.sexual = sexual;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes sexualMinors(@javax.annotation.Nonnull List<SexualMinorsEnum> sexualMinors) {
    
    this.sexualMinors = sexualMinors;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSexualMinorsItem(SexualMinorsEnum sexualMinorsItem) {
    if (this.sexualMinors == null) {
      this.sexualMinors = new ArrayList<>();
    }
    this.sexualMinors.add(sexualMinorsItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;sexual/minors&#39;.
   * @return sexualMinors
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEXUAL_MINORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SexualMinorsEnum> getSexualMinors() {
    return sexualMinors;
  }


  @JsonProperty(JSON_PROPERTY_SEXUAL_MINORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSexualMinors(@javax.annotation.Nonnull List<SexualMinorsEnum> sexualMinors) {
    this.sexualMinors = sexualMinors;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes violence(@javax.annotation.Nonnull List<ViolenceEnum> violence) {
    
    this.violence = violence;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addViolenceItem(ViolenceEnum violenceItem) {
    if (this.violence == null) {
      this.violence = new ArrayList<>();
    }
    this.violence.add(violenceItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;violence&#39;.
   * @return violence
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIOLENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ViolenceEnum> getViolence() {
    return violence;
  }


  @JsonProperty(JSON_PROPERTY_VIOLENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViolence(@javax.annotation.Nonnull List<ViolenceEnum> violence) {
    this.violence = violence;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes violenceGraphic(@javax.annotation.Nonnull List<ViolenceGraphicEnum> violenceGraphic) {
    
    this.violenceGraphic = violenceGraphic;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addViolenceGraphicItem(ViolenceGraphicEnum violenceGraphicItem) {
    if (this.violenceGraphic == null) {
      this.violenceGraphic = new ArrayList<>();
    }
    this.violenceGraphic.add(violenceGraphicItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;violence/graphic&#39;.
   * @return violenceGraphic
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIOLENCE_GRAPHIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ViolenceGraphicEnum> getViolenceGraphic() {
    return violenceGraphic;
  }


  @JsonProperty(JSON_PROPERTY_VIOLENCE_GRAPHIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViolenceGraphic(@javax.annotation.Nonnull List<ViolenceGraphicEnum> violenceGraphic) {
    this.violenceGraphic = violenceGraphic;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateModerationResponseResultsInnerCategoryAppliedInputTypes createModerationResponseResultsInnerCategoryAppliedInputTypes = (CreateModerationResponseResultsInnerCategoryAppliedInputTypes) o;
    return Objects.equals(this.hate, createModerationResponseResultsInnerCategoryAppliedInputTypes.hate) &&
        Objects.equals(this.hateThreatening, createModerationResponseResultsInnerCategoryAppliedInputTypes.hateThreatening) &&
        Objects.equals(this.harassment, createModerationResponseResultsInnerCategoryAppliedInputTypes.harassment) &&
        Objects.equals(this.harassmentThreatening, createModerationResponseResultsInnerCategoryAppliedInputTypes.harassmentThreatening) &&
        Objects.equals(this.illicit, createModerationResponseResultsInnerCategoryAppliedInputTypes.illicit) &&
        Objects.equals(this.illicitViolent, createModerationResponseResultsInnerCategoryAppliedInputTypes.illicitViolent) &&
        Objects.equals(this.selfHarm, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarm) &&
        Objects.equals(this.selfHarmIntent, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarmIntent) &&
        Objects.equals(this.selfHarmInstructions, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarmInstructions) &&
        Objects.equals(this.sexual, createModerationResponseResultsInnerCategoryAppliedInputTypes.sexual) &&
        Objects.equals(this.sexualMinors, createModerationResponseResultsInnerCategoryAppliedInputTypes.sexualMinors) &&
        Objects.equals(this.violence, createModerationResponseResultsInnerCategoryAppliedInputTypes.violence) &&
        Objects.equals(this.violenceGraphic, createModerationResponseResultsInnerCategoryAppliedInputTypes.violenceGraphic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hate, hateThreatening, harassment, harassmentThreatening, illicit, illicitViolent, selfHarm, selfHarmIntent, selfHarmInstructions, sexual, sexualMinors, violence, violenceGraphic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateModerationResponseResultsInnerCategoryAppliedInputTypes {\n");
    sb.append("    hate: ").append(toIndentedString(hate)).append("\n");
    sb.append("    hateThreatening: ").append(toIndentedString(hateThreatening)).append("\n");
    sb.append("    harassment: ").append(toIndentedString(harassment)).append("\n");
    sb.append("    harassmentThreatening: ").append(toIndentedString(harassmentThreatening)).append("\n");
    sb.append("    illicit: ").append(toIndentedString(illicit)).append("\n");
    sb.append("    illicitViolent: ").append(toIndentedString(illicitViolent)).append("\n");
    sb.append("    selfHarm: ").append(toIndentedString(selfHarm)).append("\n");
    sb.append("    selfHarmIntent: ").append(toIndentedString(selfHarmIntent)).append("\n");
    sb.append("    selfHarmInstructions: ").append(toIndentedString(selfHarmInstructions)).append("\n");
    sb.append("    sexual: ").append(toIndentedString(sexual)).append("\n");
    sb.append("    sexualMinors: ").append(toIndentedString(sexualMinors)).append("\n");
    sb.append("    violence: ").append(toIndentedString(violence)).append("\n");
    sb.append("    violenceGraphic: ").append(toIndentedString(violenceGraphic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `hate` to the URL query string
    if (getHate() != null) {
      for (int i = 0; i < getHate().size(); i++) {
        try {
          joiner.add(String.format("%shate%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHate().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `hate/threatening` to the URL query string
    if (getHateThreatening() != null) {
      for (int i = 0; i < getHateThreatening().size(); i++) {
        try {
          joiner.add(String.format("%shate/threatening%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHateThreatening().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `harassment` to the URL query string
    if (getHarassment() != null) {
      for (int i = 0; i < getHarassment().size(); i++) {
        try {
          joiner.add(String.format("%sharassment%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHarassment().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `harassment/threatening` to the URL query string
    if (getHarassmentThreatening() != null) {
      for (int i = 0; i < getHarassmentThreatening().size(); i++) {
        try {
          joiner.add(String.format("%sharassment/threatening%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getHarassmentThreatening().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `illicit` to the URL query string
    if (getIllicit() != null) {
      for (int i = 0; i < getIllicit().size(); i++) {
        try {
          joiner.add(String.format("%sillicit%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getIllicit().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `illicit/violent` to the URL query string
    if (getIllicitViolent() != null) {
      for (int i = 0; i < getIllicitViolent().size(); i++) {
        try {
          joiner.add(String.format("%sillicit/violent%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getIllicitViolent().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `self-harm` to the URL query string
    if (getSelfHarm() != null) {
      for (int i = 0; i < getSelfHarm().size(); i++) {
        try {
          joiner.add(String.format("%sself-harm%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSelfHarm().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `self-harm/intent` to the URL query string
    if (getSelfHarmIntent() != null) {
      for (int i = 0; i < getSelfHarmIntent().size(); i++) {
        try {
          joiner.add(String.format("%sself-harm/intent%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSelfHarmIntent().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `self-harm/instructions` to the URL query string
    if (getSelfHarmInstructions() != null) {
      for (int i = 0; i < getSelfHarmInstructions().size(); i++) {
        try {
          joiner.add(String.format("%sself-harm/instructions%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSelfHarmInstructions().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `sexual` to the URL query string
    if (getSexual() != null) {
      for (int i = 0; i < getSexual().size(); i++) {
        try {
          joiner.add(String.format("%ssexual%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSexual().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `sexual/minors` to the URL query string
    if (getSexualMinors() != null) {
      for (int i = 0; i < getSexualMinors().size(); i++) {
        try {
          joiner.add(String.format("%ssexual/minors%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSexualMinors().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `violence` to the URL query string
    if (getViolence() != null) {
      for (int i = 0; i < getViolence().size(); i++) {
        try {
          joiner.add(String.format("%sviolence%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getViolence().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `violence/graphic` to the URL query string
    if (getViolenceGraphic() != null) {
      for (int i = 0; i < getViolenceGraphic().size(); i++) {
        try {
          joiner.add(String.format("%sviolence/graphic%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getViolenceGraphic().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

