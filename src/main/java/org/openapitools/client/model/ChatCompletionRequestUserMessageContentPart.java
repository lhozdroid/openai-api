/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.ChatCompletionRequestMessageContentPartAudio;
import org.openapitools.client.model.ChatCompletionRequestMessageContentPartAudioInputAudio;
import org.openapitools.client.model.ChatCompletionRequestMessageContentPartImage;
import org.openapitools.client.model.ChatCompletionRequestMessageContentPartImageImageUrl;
import org.openapitools.client.model.ChatCompletionRequestMessageContentPartText;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ChatCompletionRequestUserMessageContentPart
 */
@JsonPropertyOrder({
  ChatCompletionRequestUserMessageContentPart.JSON_PROPERTY_TYPE,
  ChatCompletionRequestUserMessageContentPart.JSON_PROPERTY_TEXT,
  ChatCompletionRequestUserMessageContentPart.JSON_PROPERTY_IMAGE_URL,
  ChatCompletionRequestUserMessageContentPart.JSON_PROPERTY_INPUT_AUDIO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-14T12:15:51.997600814-05:00[US/Eastern]", comments = "Generator version: 7.10.0")
public class ChatCompletionRequestUserMessageContentPart {
  /**
   * The type of the content part.
   */
  public enum TypeEnum {
    TEXT(String.valueOf("text")),
    
    IMAGE_URL(String.valueOf("image_url")),
    
    INPUT_AUDIO(String.valueOf("input_audio"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String JSON_PROPERTY_TEXT = "text";
  @javax.annotation.Nonnull
  private String text;

  public static final String JSON_PROPERTY_IMAGE_URL = "image_url";
  @javax.annotation.Nonnull
  private ChatCompletionRequestMessageContentPartImageImageUrl imageUrl;

  public static final String JSON_PROPERTY_INPUT_AUDIO = "input_audio";
  @javax.annotation.Nonnull
  private ChatCompletionRequestMessageContentPartAudioInputAudio inputAudio;

  public ChatCompletionRequestUserMessageContentPart() {
  }

  public ChatCompletionRequestUserMessageContentPart type(@javax.annotation.Nonnull TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * The type of the content part.
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }

  public ChatCompletionRequestUserMessageContentPart text(@javax.annotation.Nonnull String text) {
    
    this.text = text;
    return this;
  }

  /**
   * The text content.
   * @return text
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(@javax.annotation.Nonnull String text) {
    this.text = text;
  }

  public ChatCompletionRequestUserMessageContentPart imageUrl(@javax.annotation.Nonnull ChatCompletionRequestMessageContentPartImageImageUrl imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ChatCompletionRequestMessageContentPartImageImageUrl getImageUrl() {
    return imageUrl;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImageUrl(@javax.annotation.Nonnull ChatCompletionRequestMessageContentPartImageImageUrl imageUrl) {
    this.imageUrl = imageUrl;
  }

  public ChatCompletionRequestUserMessageContentPart inputAudio(@javax.annotation.Nonnull ChatCompletionRequestMessageContentPartAudioInputAudio inputAudio) {
    
    this.inputAudio = inputAudio;
    return this;
  }

  /**
   * Get inputAudio
   * @return inputAudio
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ChatCompletionRequestMessageContentPartAudioInputAudio getInputAudio() {
    return inputAudio;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputAudio(@javax.annotation.Nonnull ChatCompletionRequestMessageContentPartAudioInputAudio inputAudio) {
    this.inputAudio = inputAudio;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatCompletionRequestUserMessageContentPart chatCompletionRequestUserMessageContentPart = (ChatCompletionRequestUserMessageContentPart) o;
    return Objects.equals(this.type, chatCompletionRequestUserMessageContentPart.type) &&
        Objects.equals(this.text, chatCompletionRequestUserMessageContentPart.text) &&
        Objects.equals(this.imageUrl, chatCompletionRequestUserMessageContentPart.imageUrl) &&
        Objects.equals(this.inputAudio, chatCompletionRequestUserMessageContentPart.inputAudio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, text, imageUrl, inputAudio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatCompletionRequestUserMessageContentPart {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    inputAudio: ").append(toIndentedString(inputAudio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `text` to the URL query string
    if (getText() != null) {
      try {
        joiner.add(String.format("%stext%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getText()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `image_url` to the URL query string
    if (getImageUrl() != null) {
      joiner.add(getImageUrl().toUrlQueryString(prefix + "image_url" + suffix));
    }

    // add `input_audio` to the URL query string
    if (getInputAudio() != null) {
      joiner.add(getInputAudio().toUrlQueryString(prefix + "input_audio" + suffix));
    }

    return joiner.toString();
  }

}

