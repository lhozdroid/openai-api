/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.MessageContentImageFileObject;
import org.openapitools.client.model.MessageContentImageFileObjectImageFile;
import org.openapitools.client.model.MessageContentImageUrlObject;
import org.openapitools.client.model.MessageContentImageUrlObjectImageUrl;
import org.openapitools.client.model.MessageContentRefusalObject;
import org.openapitools.client.model.MessageContentTextObject;
import org.openapitools.client.model.MessageContentTextObjectText;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MessageObjectContentInner
 */
@JsonPropertyOrder({
  MessageObjectContentInner.JSON_PROPERTY_TYPE,
  MessageObjectContentInner.JSON_PROPERTY_IMAGE_FILE,
  MessageObjectContentInner.JSON_PROPERTY_IMAGE_URL,
  MessageObjectContentInner.JSON_PROPERTY_TEXT,
  MessageObjectContentInner.JSON_PROPERTY_REFUSAL
})
@JsonTypeName("MessageObject_content_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class MessageObjectContentInner {
  /**
   * Always &#x60;image_file&#x60;.
   */
  public enum TypeEnum {
    IMAGE_FILE(String.valueOf("image_file")),
    
    IMAGE_URL(String.valueOf("image_url")),
    
    TEXT(String.valueOf("text")),
    
    REFUSAL(String.valueOf("refusal"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String JSON_PROPERTY_IMAGE_FILE = "image_file";
  @javax.annotation.Nonnull
  private MessageContentImageFileObjectImageFile imageFile;

  public static final String JSON_PROPERTY_IMAGE_URL = "image_url";
  @javax.annotation.Nonnull
  private MessageContentImageUrlObjectImageUrl imageUrl;

  public static final String JSON_PROPERTY_TEXT = "text";
  @javax.annotation.Nonnull
  private MessageContentTextObjectText text;

  public static final String JSON_PROPERTY_REFUSAL = "refusal";
  @javax.annotation.Nonnull
  private String refusal;

  public MessageObjectContentInner() {
  }

  public MessageObjectContentInner type(@javax.annotation.Nonnull TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Always &#x60;image_file&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }

  public MessageObjectContentInner imageFile(@javax.annotation.Nonnull MessageContentImageFileObjectImageFile imageFile) {
    
    this.imageFile = imageFile;
    return this;
  }

  /**
   * Get imageFile
   * @return imageFile
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageContentImageFileObjectImageFile getImageFile() {
    return imageFile;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImageFile(@javax.annotation.Nonnull MessageContentImageFileObjectImageFile imageFile) {
    this.imageFile = imageFile;
  }

  public MessageObjectContentInner imageUrl(@javax.annotation.Nonnull MessageContentImageUrlObjectImageUrl imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageContentImageUrlObjectImageUrl getImageUrl() {
    return imageUrl;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImageUrl(@javax.annotation.Nonnull MessageContentImageUrlObjectImageUrl imageUrl) {
    this.imageUrl = imageUrl;
  }

  public MessageObjectContentInner text(@javax.annotation.Nonnull MessageContentTextObjectText text) {
    
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageContentTextObjectText getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(@javax.annotation.Nonnull MessageContentTextObjectText text) {
    this.text = text;
  }

  public MessageObjectContentInner refusal(@javax.annotation.Nonnull String refusal) {
    
    this.refusal = refusal;
    return this;
  }

  /**
   * Get refusal
   * @return refusal
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REFUSAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRefusal() {
    return refusal;
  }


  @JsonProperty(JSON_PROPERTY_REFUSAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRefusal(@javax.annotation.Nonnull String refusal) {
    this.refusal = refusal;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageObjectContentInner messageObjectContentInner = (MessageObjectContentInner) o;
    return Objects.equals(this.type, messageObjectContentInner.type) &&
        Objects.equals(this.imageFile, messageObjectContentInner.imageFile) &&
        Objects.equals(this.imageUrl, messageObjectContentInner.imageUrl) &&
        Objects.equals(this.text, messageObjectContentInner.text) &&
        Objects.equals(this.refusal, messageObjectContentInner.refusal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, imageFile, imageUrl, text, refusal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageObjectContentInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    imageFile: ").append(toIndentedString(imageFile)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    refusal: ").append(toIndentedString(refusal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `image_file` to the URL query string
    if (getImageFile() != null) {
      joiner.add(getImageFile().toUrlQueryString(prefix + "image_file" + suffix));
    }

    // add `image_url` to the URL query string
    if (getImageUrl() != null) {
      joiner.add(getImageUrl().toUrlQueryString(prefix + "image_url" + suffix));
    }

    // add `text` to the URL query string
    if (getText() != null) {
      joiner.add(getText().toUrlQueryString(prefix + "text" + suffix));
    }

    // add `refusal` to the URL query string
    if (getRefusal() != null) {
      try {
        joiner.add(String.format("%srefusal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRefusal()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

