/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * VectorStoreFileBatchObjectFileCounts
 */
@JsonPropertyOrder({
  VectorStoreFileBatchObjectFileCounts.JSON_PROPERTY_IN_PROGRESS,
  VectorStoreFileBatchObjectFileCounts.JSON_PROPERTY_COMPLETED,
  VectorStoreFileBatchObjectFileCounts.JSON_PROPERTY_FAILED,
  VectorStoreFileBatchObjectFileCounts.JSON_PROPERTY_CANCELLED,
  VectorStoreFileBatchObjectFileCounts.JSON_PROPERTY_TOTAL
})
@JsonTypeName("VectorStoreFileBatchObject_file_counts")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class VectorStoreFileBatchObjectFileCounts {
  public static final String JSON_PROPERTY_IN_PROGRESS = "in_progress";
  @javax.annotation.Nonnull
  private Integer inProgress;

  public static final String JSON_PROPERTY_COMPLETED = "completed";
  @javax.annotation.Nonnull
  private Integer completed;

  public static final String JSON_PROPERTY_FAILED = "failed";
  @javax.annotation.Nonnull
  private Integer failed;

  public static final String JSON_PROPERTY_CANCELLED = "cancelled";
  @javax.annotation.Nonnull
  private Integer cancelled;

  public static final String JSON_PROPERTY_TOTAL = "total";
  @javax.annotation.Nonnull
  private Integer total;

  public VectorStoreFileBatchObjectFileCounts() {
  }

  public VectorStoreFileBatchObjectFileCounts inProgress(@javax.annotation.Nonnull Integer inProgress) {
    
    this.inProgress = inProgress;
    return this;
  }

  /**
   * The number of files that are currently being processed.
   * @return inProgress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInProgress() {
    return inProgress;
  }


  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInProgress(@javax.annotation.Nonnull Integer inProgress) {
    this.inProgress = inProgress;
  }

  public VectorStoreFileBatchObjectFileCounts completed(@javax.annotation.Nonnull Integer completed) {
    
    this.completed = completed;
    return this;
  }

  /**
   * The number of files that have been processed.
   * @return completed
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCompleted() {
    return completed;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompleted(@javax.annotation.Nonnull Integer completed) {
    this.completed = completed;
  }

  public VectorStoreFileBatchObjectFileCounts failed(@javax.annotation.Nonnull Integer failed) {
    
    this.failed = failed;
    return this;
  }

  /**
   * The number of files that have failed to process.
   * @return failed
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFailed() {
    return failed;
  }


  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFailed(@javax.annotation.Nonnull Integer failed) {
    this.failed = failed;
  }

  public VectorStoreFileBatchObjectFileCounts cancelled(@javax.annotation.Nonnull Integer cancelled) {
    
    this.cancelled = cancelled;
    return this;
  }

  /**
   * The number of files that where cancelled.
   * @return cancelled
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CANCELLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCancelled() {
    return cancelled;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCancelled(@javax.annotation.Nonnull Integer cancelled) {
    this.cancelled = cancelled;
  }

  public VectorStoreFileBatchObjectFileCounts total(@javax.annotation.Nonnull Integer total) {
    
    this.total = total;
    return this;
  }

  /**
   * The total number of files.
   * @return total
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(@javax.annotation.Nonnull Integer total) {
    this.total = total;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorStoreFileBatchObjectFileCounts vectorStoreFileBatchObjectFileCounts = (VectorStoreFileBatchObjectFileCounts) o;
    return Objects.equals(this.inProgress, vectorStoreFileBatchObjectFileCounts.inProgress) &&
        Objects.equals(this.completed, vectorStoreFileBatchObjectFileCounts.completed) &&
        Objects.equals(this.failed, vectorStoreFileBatchObjectFileCounts.failed) &&
        Objects.equals(this.cancelled, vectorStoreFileBatchObjectFileCounts.cancelled) &&
        Objects.equals(this.total, vectorStoreFileBatchObjectFileCounts.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inProgress, completed, failed, cancelled, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorStoreFileBatchObjectFileCounts {\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    cancelled: ").append(toIndentedString(cancelled)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `in_progress` to the URL query string
    if (getInProgress() != null) {
      try {
        joiner.add(String.format("%sin_progress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInProgress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `completed` to the URL query string
    if (getCompleted() != null) {
      try {
        joiner.add(String.format("%scompleted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCompleted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `failed` to the URL query string
    if (getFailed() != null) {
      try {
        joiner.add(String.format("%sfailed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFailed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `cancelled` to the URL query string
    if (getCancelled() != null) {
      try {
        joiner.add(String.format("%scancelled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCancelled()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `total` to the URL query string
    if (getTotal() != null) {
      try {
        joiner.add(String.format("%stotal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotal()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

