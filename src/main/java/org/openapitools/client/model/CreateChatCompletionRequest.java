/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChatCompletionFunctions;
import org.openapitools.client.model.ChatCompletionRequestMessage;
import org.openapitools.client.model.ChatCompletionStreamOptions;
import org.openapitools.client.model.ChatCompletionTool;
import org.openapitools.client.model.ChatCompletionToolChoiceOption;
import org.openapitools.client.model.CreateChatCompletionRequestAudio;
import org.openapitools.client.model.CreateChatCompletionRequestFunctionCall;
import org.openapitools.client.model.CreateChatCompletionRequestModel;
import org.openapitools.client.model.CreateChatCompletionRequestPrediction;
import org.openapitools.client.model.CreateChatCompletionRequestResponseFormat;
import org.openapitools.client.model.CreateChatCompletionRequestStop;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateChatCompletionRequest
 */
@JsonPropertyOrder({
  CreateChatCompletionRequest.JSON_PROPERTY_MESSAGES,
  CreateChatCompletionRequest.JSON_PROPERTY_MODEL,
  CreateChatCompletionRequest.JSON_PROPERTY_STORE,
  CreateChatCompletionRequest.JSON_PROPERTY_REASONING_EFFORT,
  CreateChatCompletionRequest.JSON_PROPERTY_METADATA,
  CreateChatCompletionRequest.JSON_PROPERTY_FREQUENCY_PENALTY,
  CreateChatCompletionRequest.JSON_PROPERTY_LOGIT_BIAS,
  CreateChatCompletionRequest.JSON_PROPERTY_LOGPROBS,
  CreateChatCompletionRequest.JSON_PROPERTY_TOP_LOGPROBS,
  CreateChatCompletionRequest.JSON_PROPERTY_MAX_TOKENS,
  CreateChatCompletionRequest.JSON_PROPERTY_MAX_COMPLETION_TOKENS,
  CreateChatCompletionRequest.JSON_PROPERTY_N,
  CreateChatCompletionRequest.JSON_PROPERTY_MODALITIES,
  CreateChatCompletionRequest.JSON_PROPERTY_PREDICTION,
  CreateChatCompletionRequest.JSON_PROPERTY_AUDIO,
  CreateChatCompletionRequest.JSON_PROPERTY_PRESENCE_PENALTY,
  CreateChatCompletionRequest.JSON_PROPERTY_RESPONSE_FORMAT,
  CreateChatCompletionRequest.JSON_PROPERTY_SEED,
  CreateChatCompletionRequest.JSON_PROPERTY_SERVICE_TIER,
  CreateChatCompletionRequest.JSON_PROPERTY_STOP,
  CreateChatCompletionRequest.JSON_PROPERTY_STREAM,
  CreateChatCompletionRequest.JSON_PROPERTY_STREAM_OPTIONS,
  CreateChatCompletionRequest.JSON_PROPERTY_TEMPERATURE,
  CreateChatCompletionRequest.JSON_PROPERTY_TOP_P,
  CreateChatCompletionRequest.JSON_PROPERTY_TOOLS,
  CreateChatCompletionRequest.JSON_PROPERTY_TOOL_CHOICE,
  CreateChatCompletionRequest.JSON_PROPERTY_PARALLEL_TOOL_CALLS,
  CreateChatCompletionRequest.JSON_PROPERTY_USER,
  CreateChatCompletionRequest.JSON_PROPERTY_FUNCTION_CALL,
  CreateChatCompletionRequest.JSON_PROPERTY_FUNCTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-14T12:15:51.997600814-05:00[US/Eastern]", comments = "Generator version: 7.10.0")
public class CreateChatCompletionRequest {
  public static final String JSON_PROPERTY_MESSAGES = "messages";
  @javax.annotation.Nonnull
  private List<ChatCompletionRequestMessage> messages = new ArrayList<>();

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nonnull
  private CreateChatCompletionRequestModel model;

  public static final String JSON_PROPERTY_STORE = "store";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> store = JsonNullable.<Boolean>of(false);

  /**
   * **o1 models only**   Constrains effort on reasoning for  [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently supported values are &#x60;low&#x60;, &#x60;medium&#x60;, and &#x60;high&#x60;. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response. 
   */
  public enum ReasoningEffortEnum {
    LOW(String.valueOf("low")),
    
    MEDIUM(String.valueOf("medium")),
    
    HIGH(String.valueOf("high"));

    private String value;

    ReasoningEffortEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasoningEffortEnum fromValue(String value) {
      for (ReasoningEffortEnum b : ReasoningEffortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REASONING_EFFORT = "reasoning_effort";
  @javax.annotation.Nullable
  private ReasoningEffortEnum reasoningEffort = ReasoningEffortEnum.MEDIUM;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private JsonNullable<Map<String, String>> metadata = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_FREQUENCY_PENALTY = "frequency_penalty";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> frequencyPenalty = JsonNullable.<BigDecimal>of(new BigDecimal("0"));

  public static final String JSON_PROPERTY_LOGIT_BIAS = "logit_bias";
  @javax.annotation.Nullable
  private JsonNullable<Map<String, Integer>> logitBias = JsonNullable.<Map<String, Integer>>undefined();

  public static final String JSON_PROPERTY_LOGPROBS = "logprobs";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> logprobs = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_TOP_LOGPROBS = "top_logprobs";
  @javax.annotation.Nullable
  private JsonNullable<Integer> topLogprobs = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_TOKENS = "max_tokens";
  @javax.annotation.Nullable
  private JsonNullable<Integer> maxTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_COMPLETION_TOKENS = "max_completion_tokens";
  @javax.annotation.Nullable
  private JsonNullable<Integer> maxCompletionTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_N = "n";
  @javax.annotation.Nullable
  private JsonNullable<Integer> n = JsonNullable.<Integer>of(1);

  /**
   * Gets or Sets modalities
   */
  public enum ModalitiesEnum {
    TEXT(String.valueOf("text")),
    
    AUDIO(String.valueOf("audio"));

    private String value;

    ModalitiesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModalitiesEnum fromValue(String value) {
      for (ModalitiesEnum b : ModalitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODALITIES = "modalities";
  @javax.annotation.Nullable
  private JsonNullable<List<ModalitiesEnum>> modalities = JsonNullable.<List<ModalitiesEnum>>undefined();

  public static final String JSON_PROPERTY_PREDICTION = "prediction";
  @javax.annotation.Nullable
  private JsonNullable<CreateChatCompletionRequestPrediction> prediction = JsonNullable.<CreateChatCompletionRequestPrediction>undefined();

  public static final String JSON_PROPERTY_AUDIO = "audio";
  @javax.annotation.Nullable
  private JsonNullable<CreateChatCompletionRequestAudio> audio = JsonNullable.<CreateChatCompletionRequestAudio>undefined();

  public static final String JSON_PROPERTY_PRESENCE_PENALTY = "presence_penalty";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> presencePenalty = JsonNullable.<BigDecimal>of(new BigDecimal("0"));

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  @javax.annotation.Nullable
  private CreateChatCompletionRequestResponseFormat responseFormat;

  public static final String JSON_PROPERTY_SEED = "seed";
  @javax.annotation.Nullable
  private JsonNullable<Integer> seed = JsonNullable.<Integer>undefined();

  /**
   * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to &#39;auto&#39;, and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.   - If set to &#39;auto&#39;, and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to &#39;default&#39;, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is &#39;auto&#39;.    When this parameter is set, the response body will include the &#x60;service_tier&#x60; utilized. 
   */
  public enum ServiceTierEnum {
    AUTO(String.valueOf("auto")),
    
    DEFAULT(String.valueOf("default"));

    private String value;

    ServiceTierEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceTierEnum fromValue(String value) {
      for (ServiceTierEnum b : ServiceTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_SERVICE_TIER = "service_tier";
  @javax.annotation.Nullable
  private JsonNullable<ServiceTierEnum> serviceTier = JsonNullable.<ServiceTierEnum>of(ServiceTierEnum.AUTO);

  public static final String JSON_PROPERTY_STOP = "stop";
  @javax.annotation.Nullable
  private CreateChatCompletionRequestStop stop = null;

  public static final String JSON_PROPERTY_STREAM = "stream";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> stream = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_STREAM_OPTIONS = "stream_options";
  @javax.annotation.Nullable
  private JsonNullable<ChatCompletionStreamOptions> streamOptions = JsonNullable.<ChatCompletionStreamOptions>undefined();

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> topP = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_TOOLS = "tools";
  @javax.annotation.Nullable
  private List<ChatCompletionTool> tools = new ArrayList<>();

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  @javax.annotation.Nullable
  private ChatCompletionToolChoiceOption toolChoice;

  public static final String JSON_PROPERTY_PARALLEL_TOOL_CALLS = "parallel_tool_calls";
  @javax.annotation.Nullable
  private Boolean parallelToolCalls = true;

  public static final String JSON_PROPERTY_USER = "user";
  @javax.annotation.Nullable
  private String user;

  public static final String JSON_PROPERTY_FUNCTION_CALL = "function_call";
  @javax.annotation.Nullable
  private CreateChatCompletionRequestFunctionCall functionCall;

  public static final String JSON_PROPERTY_FUNCTIONS = "functions";
  @javax.annotation.Nullable
  private List<ChatCompletionFunctions> functions = new ArrayList<>();

  public CreateChatCompletionRequest() {
  }

  public CreateChatCompletionRequest messages(@javax.annotation.Nonnull List<ChatCompletionRequestMessage> messages) {
    
    this.messages = messages;
    return this;
  }

  public CreateChatCompletionRequest addMessagesItem(ChatCompletionRequestMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * A list of messages comprising the conversation so far. Depending on the [model](/docs/models) you use, different message types (modalities) are supported, like [text](/docs/guides/text-generation), [images](/docs/guides/vision), and [audio](/docs/guides/audio). 
   * @return messages
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ChatCompletionRequestMessage> getMessages() {
    return messages;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessages(@javax.annotation.Nonnull List<ChatCompletionRequestMessage> messages) {
    this.messages = messages;
  }

  public CreateChatCompletionRequest model(@javax.annotation.Nonnull CreateChatCompletionRequestModel model) {
    
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateChatCompletionRequestModel getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@javax.annotation.Nonnull CreateChatCompletionRequestModel model) {
    this.model = model;
  }

  public CreateChatCompletionRequest store(@javax.annotation.Nullable Boolean store) {
    this.store = JsonNullable.<Boolean>of(store);
    
    return this;
  }

  /**
   * Whether or not to store the output of this chat completion request for  use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products. 
   * @return store
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getStore() {
        return store.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getStore_JsonNullable() {
    return store;
  }
  
  @JsonProperty(JSON_PROPERTY_STORE)
  public void setStore_JsonNullable(JsonNullable<Boolean> store) {
    this.store = store;
  }

  public void setStore(@javax.annotation.Nullable Boolean store) {
    this.store = JsonNullable.<Boolean>of(store);
  }

  public CreateChatCompletionRequest reasoningEffort(@javax.annotation.Nullable ReasoningEffortEnum reasoningEffort) {
    
    this.reasoningEffort = reasoningEffort;
    return this;
  }

  /**
   * **o1 models only**   Constrains effort on reasoning for  [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently supported values are &#x60;low&#x60;, &#x60;medium&#x60;, and &#x60;high&#x60;. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response. 
   * @return reasoningEffort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASONING_EFFORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReasoningEffortEnum getReasoningEffort() {
    return reasoningEffort;
  }


  @JsonProperty(JSON_PROPERTY_REASONING_EFFORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReasoningEffort(@javax.annotation.Nullable ReasoningEffortEnum reasoningEffort) {
    this.reasoningEffort = reasoningEffort;
  }

  public CreateChatCompletionRequest metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = JsonNullable.<Map<String, String>>of(metadata);
    
    return this;
  }

  public CreateChatCompletionRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null || !this.metadata.isPresent()) {
      this.metadata = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.metadata.get().put(key, metadataItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Developer-defined tags and values used for filtering completions in the [dashboard](https://platform.openai.com/chat-completions). 
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getMetadata() {
        return metadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getMetadata_JsonNullable() {
    return metadata;
  }
  
  @JsonProperty(JSON_PROPERTY_METADATA)
  public void setMetadata_JsonNullable(JsonNullable<Map<String, String>> metadata) {
    this.metadata = metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = JsonNullable.<Map<String, String>>of(metadata);
  }

  public CreateChatCompletionRequest frequencyPenalty(@javax.annotation.Nullable BigDecimal frequencyPenalty) {
    this.frequencyPenalty = JsonNullable.<BigDecimal>of(frequencyPenalty);
    
    return this;
  }

  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim. 
   * minimum: -2
   * maximum: 2
   * @return frequencyPenalty
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getFrequencyPenalty() {
        return frequencyPenalty.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getFrequencyPenalty_JsonNullable() {
    return frequencyPenalty;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  public void setFrequencyPenalty_JsonNullable(JsonNullable<BigDecimal> frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
  }

  public void setFrequencyPenalty(@javax.annotation.Nullable BigDecimal frequencyPenalty) {
    this.frequencyPenalty = JsonNullable.<BigDecimal>of(frequencyPenalty);
  }

  public CreateChatCompletionRequest logitBias(@javax.annotation.Nullable Map<String, Integer> logitBias) {
    this.logitBias = JsonNullable.<Map<String, Integer>>of(logitBias);
    
    return this;
  }

  public CreateChatCompletionRequest putLogitBiasItem(String key, Integer logitBiasItem) {
    if (this.logitBias == null || !this.logitBias.isPresent()) {
      this.logitBias = JsonNullable.<Map<String, Integer>>of(new HashMap<>());
    }
    try {
      this.logitBias.get().put(key, logitBiasItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
   * @return logitBias
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, Integer> getLogitBias() {
        return logitBias.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGIT_BIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Integer>> getLogitBias_JsonNullable() {
    return logitBias;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGIT_BIAS)
  public void setLogitBias_JsonNullable(JsonNullable<Map<String, Integer>> logitBias) {
    this.logitBias = logitBias;
  }

  public void setLogitBias(@javax.annotation.Nullable Map<String, Integer> logitBias) {
    this.logitBias = JsonNullable.<Map<String, Integer>>of(logitBias);
  }

  public CreateChatCompletionRequest logprobs(@javax.annotation.Nullable Boolean logprobs) {
    this.logprobs = JsonNullable.<Boolean>of(logprobs);
    
    return this;
  }

  /**
   * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;. 
   * @return logprobs
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getLogprobs() {
        return logprobs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getLogprobs_JsonNullable() {
    return logprobs;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  public void setLogprobs_JsonNullable(JsonNullable<Boolean> logprobs) {
    this.logprobs = logprobs;
  }

  public void setLogprobs(@javax.annotation.Nullable Boolean logprobs) {
    this.logprobs = JsonNullable.<Boolean>of(logprobs);
  }

  public CreateChatCompletionRequest topLogprobs(@javax.annotation.Nullable Integer topLogprobs) {
    this.topLogprobs = JsonNullable.<Integer>of(topLogprobs);
    
    return this;
  }

  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used. 
   * minimum: 0
   * maximum: 20
   * @return topLogprobs
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getTopLogprobs() {
        return topLogprobs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getTopLogprobs_JsonNullable() {
    return topLogprobs;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_LOGPROBS)
  public void setTopLogprobs_JsonNullable(JsonNullable<Integer> topLogprobs) {
    this.topLogprobs = topLogprobs;
  }

  public void setTopLogprobs(@javax.annotation.Nullable Integer topLogprobs) {
    this.topLogprobs = JsonNullable.<Integer>of(topLogprobs);
  }

  public CreateChatCompletionRequest maxTokens(@javax.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
    
    return this;
  }

  /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of &#x60;max_completion_tokens&#x60;, and is not compatible with [o1 series models](/docs/guides/reasoning). 
   * @return maxTokens
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getMaxTokens() {
        return maxTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxTokens_JsonNullable() {
    return maxTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  public void setMaxTokens_JsonNullable(JsonNullable<Integer> maxTokens) {
    this.maxTokens = maxTokens;
  }

  public void setMaxTokens(@javax.annotation.Nullable Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
  }

  public CreateChatCompletionRequest maxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    this.maxCompletionTokens = JsonNullable.<Integer>of(maxCompletionTokens);
    
    return this;
  }

  /**
   * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). 
   * @return maxCompletionTokens
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getMaxCompletionTokens() {
        return maxCompletionTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxCompletionTokens_JsonNullable() {
    return maxCompletionTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  public void setMaxCompletionTokens_JsonNullable(JsonNullable<Integer> maxCompletionTokens) {
    this.maxCompletionTokens = maxCompletionTokens;
  }

  public void setMaxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    this.maxCompletionTokens = JsonNullable.<Integer>of(maxCompletionTokens);
  }

  public CreateChatCompletionRequest n(@javax.annotation.Nullable Integer n) {
    this.n = JsonNullable.<Integer>of(n);
    
    return this;
  }

  /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
   * minimum: 1
   * maximum: 128
   * @return n
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getN() {
        return n.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getN_JsonNullable() {
    return n;
  }
  
  @JsonProperty(JSON_PROPERTY_N)
  public void setN_JsonNullable(JsonNullable<Integer> n) {
    this.n = n;
  }

  public void setN(@javax.annotation.Nullable Integer n) {
    this.n = JsonNullable.<Integer>of(n);
  }

  public CreateChatCompletionRequest modalities(@javax.annotation.Nullable List<ModalitiesEnum> modalities) {
    this.modalities = JsonNullable.<List<ModalitiesEnum>>of(modalities);
    
    return this;
  }

  public CreateChatCompletionRequest addModalitiesItem(ModalitiesEnum modalitiesItem) {
    if (this.modalities == null || !this.modalities.isPresent()) {
      this.modalities = JsonNullable.<List<ModalitiesEnum>>of(new ArrayList<>());
    }
    try {
      this.modalities.get().add(modalitiesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default:  &#x60;[\&quot;text\&quot;]&#x60;  The &#x60;gpt-4o-audio-preview&#x60; model can also be used to [generate audio](/docs/guides/audio). To request that this model generate both text and audio responses, you can use:  &#x60;[\&quot;text\&quot;, \&quot;audio\&quot;]&#x60; 
   * @return modalities
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<ModalitiesEnum> getModalities() {
        return modalities.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODALITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<ModalitiesEnum>> getModalities_JsonNullable() {
    return modalities;
  }
  
  @JsonProperty(JSON_PROPERTY_MODALITIES)
  public void setModalities_JsonNullable(JsonNullable<List<ModalitiesEnum>> modalities) {
    this.modalities = modalities;
  }

  public void setModalities(@javax.annotation.Nullable List<ModalitiesEnum> modalities) {
    this.modalities = JsonNullable.<List<ModalitiesEnum>>of(modalities);
  }

  public CreateChatCompletionRequest prediction(@javax.annotation.Nullable CreateChatCompletionRequestPrediction prediction) {
    this.prediction = JsonNullable.<CreateChatCompletionRequestPrediction>of(prediction);
    
    return this;
  }

  /**
   * Get prediction
   * @return prediction
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateChatCompletionRequestPrediction getPrediction() {
        return prediction.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PREDICTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateChatCompletionRequestPrediction> getPrediction_JsonNullable() {
    return prediction;
  }
  
  @JsonProperty(JSON_PROPERTY_PREDICTION)
  public void setPrediction_JsonNullable(JsonNullable<CreateChatCompletionRequestPrediction> prediction) {
    this.prediction = prediction;
  }

  public void setPrediction(@javax.annotation.Nullable CreateChatCompletionRequestPrediction prediction) {
    this.prediction = JsonNullable.<CreateChatCompletionRequestPrediction>of(prediction);
  }

  public CreateChatCompletionRequest audio(@javax.annotation.Nullable CreateChatCompletionRequestAudio audio) {
    this.audio = JsonNullable.<CreateChatCompletionRequestAudio>of(audio);
    
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateChatCompletionRequestAudio getAudio() {
        return audio.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateChatCompletionRequestAudio> getAudio_JsonNullable() {
    return audio;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO)
  public void setAudio_JsonNullable(JsonNullable<CreateChatCompletionRequestAudio> audio) {
    this.audio = audio;
  }

  public void setAudio(@javax.annotation.Nullable CreateChatCompletionRequestAudio audio) {
    this.audio = JsonNullable.<CreateChatCompletionRequestAudio>of(audio);
  }

  public CreateChatCompletionRequest presencePenalty(@javax.annotation.Nullable BigDecimal presencePenalty) {
    this.presencePenalty = JsonNullable.<BigDecimal>of(presencePenalty);
    
    return this;
  }

  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics. 
   * minimum: -2
   * maximum: 2
   * @return presencePenalty
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getPresencePenalty() {
        return presencePenalty.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPresencePenalty_JsonNullable() {
    return presencePenalty;
  }
  
  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  public void setPresencePenalty_JsonNullable(JsonNullable<BigDecimal> presencePenalty) {
    this.presencePenalty = presencePenalty;
  }

  public void setPresencePenalty(@javax.annotation.Nullable BigDecimal presencePenalty) {
    this.presencePenalty = JsonNullable.<BigDecimal>of(presencePenalty);
  }

  public CreateChatCompletionRequest responseFormat(@javax.annotation.Nullable CreateChatCompletionRequestResponseFormat responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

  /**
   * Get responseFormat
   * @return responseFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestResponseFormat getResponseFormat() {
    return responseFormat;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseFormat(@javax.annotation.Nullable CreateChatCompletionRequestResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }

  public CreateChatCompletionRequest seed(@javax.annotation.Nullable Integer seed) {
    this.seed = JsonNullable.<Integer>of(seed);
    
    return this;
  }

  /**
   * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
   * minimum: 9223372036854775616
   * maximum: -9223372036854775616
   * @return seed
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getSeed() {
        return seed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getSeed_JsonNullable() {
    return seed;
  }
  
  @JsonProperty(JSON_PROPERTY_SEED)
  public void setSeed_JsonNullable(JsonNullable<Integer> seed) {
    this.seed = seed;
  }

  public void setSeed(@javax.annotation.Nullable Integer seed) {
    this.seed = JsonNullable.<Integer>of(seed);
  }

  public CreateChatCompletionRequest serviceTier(@javax.annotation.Nullable ServiceTierEnum serviceTier) {
    this.serviceTier = JsonNullable.<ServiceTierEnum>of(serviceTier);
    
    return this;
  }

  /**
   * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to &#39;auto&#39;, and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.   - If set to &#39;auto&#39;, and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to &#39;default&#39;, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is &#39;auto&#39;.    When this parameter is set, the response body will include the &#x60;service_tier&#x60; utilized. 
   * @return serviceTier
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public ServiceTierEnum getServiceTier() {
        return serviceTier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SERVICE_TIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ServiceTierEnum> getServiceTier_JsonNullable() {
    return serviceTier;
  }
  
  @JsonProperty(JSON_PROPERTY_SERVICE_TIER)
  public void setServiceTier_JsonNullable(JsonNullable<ServiceTierEnum> serviceTier) {
    this.serviceTier = serviceTier;
  }

  public void setServiceTier(@javax.annotation.Nullable ServiceTierEnum serviceTier) {
    this.serviceTier = JsonNullable.<ServiceTierEnum>of(serviceTier);
  }

  public CreateChatCompletionRequest stop(@javax.annotation.Nullable CreateChatCompletionRequestStop stop) {
    
    this.stop = stop;
    return this;
  }

  /**
   * Get stop
   * @return stop
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestStop getStop() {
    return stop;
  }


  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStop(@javax.annotation.Nullable CreateChatCompletionRequestStop stop) {
    this.stop = stop;
  }

  public CreateChatCompletionRequest stream(@javax.annotation.Nullable Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
    
    return this;
  }

  /**
   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
   * @return stream
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getStream() {
        return stream.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getStream_JsonNullable() {
    return stream;
  }
  
  @JsonProperty(JSON_PROPERTY_STREAM)
  public void setStream_JsonNullable(JsonNullable<Boolean> stream) {
    this.stream = stream;
  }

  public void setStream(@javax.annotation.Nullable Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
  }

  public CreateChatCompletionRequest streamOptions(@javax.annotation.Nullable ChatCompletionStreamOptions streamOptions) {
    this.streamOptions = JsonNullable.<ChatCompletionStreamOptions>of(streamOptions);
    
    return this;
  }

  /**
   * Get streamOptions
   * @return streamOptions
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public ChatCompletionStreamOptions getStreamOptions() {
        return streamOptions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STREAM_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ChatCompletionStreamOptions> getStreamOptions_JsonNullable() {
    return streamOptions;
  }
  
  @JsonProperty(JSON_PROPERTY_STREAM_OPTIONS)
  public void setStreamOptions_JsonNullable(JsonNullable<ChatCompletionStreamOptions> streamOptions) {
    this.streamOptions = streamOptions;
  }

  public void setStreamOptions(@javax.annotation.Nullable ChatCompletionStreamOptions streamOptions) {
    this.streamOptions = JsonNullable.<ChatCompletionStreamOptions>of(streamOptions);
  }

  public CreateChatCompletionRequest temperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or &#x60;top_p&#x60; but not both. 
   * minimum: 0
   * maximum: 2
   * @return temperature
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }

  public CreateChatCompletionRequest topP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
    
    return this;
  }

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
   * minimum: 0
   * maximum: 1
   * @return topP
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTopP() {
        return topP.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTopP_JsonNullable() {
    return topP;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_P)
  public void setTopP_JsonNullable(JsonNullable<BigDecimal> topP) {
    this.topP = topP;
  }

  public void setTopP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
  }

  public CreateChatCompletionRequest tools(@javax.annotation.Nullable List<ChatCompletionTool> tools) {
    
    this.tools = tools;
    return this;
  }

  public CreateChatCompletionRequest addToolsItem(ChatCompletionTool toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

  /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. 
   * @return tools
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ChatCompletionTool> getTools() {
    return tools;
  }


  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTools(@javax.annotation.Nullable List<ChatCompletionTool> tools) {
    this.tools = tools;
  }

  public CreateChatCompletionRequest toolChoice(@javax.annotation.Nullable ChatCompletionToolChoiceOption toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

  /**
   * Get toolChoice
   * @return toolChoice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChatCompletionToolChoiceOption getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolChoice(@javax.annotation.Nullable ChatCompletionToolChoiceOption toolChoice) {
    this.toolChoice = toolChoice;
  }

  public CreateChatCompletionRequest parallelToolCalls(@javax.annotation.Nullable Boolean parallelToolCalls) {
    
    this.parallelToolCalls = parallelToolCalls;
    return this;
  }

  /**
   * Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
   * @return parallelToolCalls
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getParallelToolCalls() {
    return parallelToolCalls;
  }


  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParallelToolCalls(@javax.annotation.Nullable Boolean parallelToolCalls) {
    this.parallelToolCalls = parallelToolCalls;
  }

  public CreateChatCompletionRequest user(@javax.annotation.Nullable String user) {
    
    this.user = user;
    return this;
  }

  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). 
   * @return user
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }

  public CreateChatCompletionRequest functionCall(@javax.annotation.Nullable CreateChatCompletionRequestFunctionCall functionCall) {
    
    this.functionCall = functionCall;
    return this;
  }

  /**
   * Get functionCall
   * @return functionCall
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestFunctionCall getFunctionCall() {
    return functionCall;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionCall(@javax.annotation.Nullable CreateChatCompletionRequestFunctionCall functionCall) {
    this.functionCall = functionCall;
  }

  public CreateChatCompletionRequest functions(@javax.annotation.Nullable List<ChatCompletionFunctions> functions) {
    
    this.functions = functions;
    return this;
  }

  public CreateChatCompletionRequest addFunctionsItem(ChatCompletionFunctions functionsItem) {
    if (this.functions == null) {
      this.functions = new ArrayList<>();
    }
    this.functions.add(functionsItem);
    return this;
  }

  /**
   * Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. 
   * @return functions
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ChatCompletionFunctions> getFunctions() {
    return functions;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctions(@javax.annotation.Nullable List<ChatCompletionFunctions> functions) {
    this.functions = functions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChatCompletionRequest createChatCompletionRequest = (CreateChatCompletionRequest) o;
    return Objects.equals(this.messages, createChatCompletionRequest.messages) &&
        Objects.equals(this.model, createChatCompletionRequest.model) &&
        equalsNullable(this.store, createChatCompletionRequest.store) &&
        Objects.equals(this.reasoningEffort, createChatCompletionRequest.reasoningEffort) &&
        equalsNullable(this.metadata, createChatCompletionRequest.metadata) &&
        equalsNullable(this.frequencyPenalty, createChatCompletionRequest.frequencyPenalty) &&
        equalsNullable(this.logitBias, createChatCompletionRequest.logitBias) &&
        equalsNullable(this.logprobs, createChatCompletionRequest.logprobs) &&
        equalsNullable(this.topLogprobs, createChatCompletionRequest.topLogprobs) &&
        equalsNullable(this.maxTokens, createChatCompletionRequest.maxTokens) &&
        equalsNullable(this.maxCompletionTokens, createChatCompletionRequest.maxCompletionTokens) &&
        equalsNullable(this.n, createChatCompletionRequest.n) &&
        equalsNullable(this.modalities, createChatCompletionRequest.modalities) &&
        equalsNullable(this.prediction, createChatCompletionRequest.prediction) &&
        equalsNullable(this.audio, createChatCompletionRequest.audio) &&
        equalsNullable(this.presencePenalty, createChatCompletionRequest.presencePenalty) &&
        Objects.equals(this.responseFormat, createChatCompletionRequest.responseFormat) &&
        equalsNullable(this.seed, createChatCompletionRequest.seed) &&
        equalsNullable(this.serviceTier, createChatCompletionRequest.serviceTier) &&
        Objects.equals(this.stop, createChatCompletionRequest.stop) &&
        equalsNullable(this.stream, createChatCompletionRequest.stream) &&
        equalsNullable(this.streamOptions, createChatCompletionRequest.streamOptions) &&
        equalsNullable(this.temperature, createChatCompletionRequest.temperature) &&
        equalsNullable(this.topP, createChatCompletionRequest.topP) &&
        Objects.equals(this.tools, createChatCompletionRequest.tools) &&
        Objects.equals(this.toolChoice, createChatCompletionRequest.toolChoice) &&
        Objects.equals(this.parallelToolCalls, createChatCompletionRequest.parallelToolCalls) &&
        Objects.equals(this.user, createChatCompletionRequest.user) &&
        Objects.equals(this.functionCall, createChatCompletionRequest.functionCall) &&
        Objects.equals(this.functions, createChatCompletionRequest.functions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, model, hashCodeNullable(store), reasoningEffort, hashCodeNullable(metadata), hashCodeNullable(frequencyPenalty), hashCodeNullable(logitBias), hashCodeNullable(logprobs), hashCodeNullable(topLogprobs), hashCodeNullable(maxTokens), hashCodeNullable(maxCompletionTokens), hashCodeNullable(n), hashCodeNullable(modalities), hashCodeNullable(prediction), hashCodeNullable(audio), hashCodeNullable(presencePenalty), responseFormat, hashCodeNullable(seed), hashCodeNullable(serviceTier), stop, hashCodeNullable(stream), hashCodeNullable(streamOptions), hashCodeNullable(temperature), hashCodeNullable(topP), tools, toolChoice, parallelToolCalls, user, functionCall, functions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChatCompletionRequest {\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    store: ").append(toIndentedString(store)).append("\n");
    sb.append("    reasoningEffort: ").append(toIndentedString(reasoningEffort)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    logitBias: ").append(toIndentedString(logitBias)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    topLogprobs: ").append(toIndentedString(topLogprobs)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    maxCompletionTokens: ").append(toIndentedString(maxCompletionTokens)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    modalities: ").append(toIndentedString(modalities)).append("\n");
    sb.append("    prediction: ").append(toIndentedString(prediction)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    serviceTier: ").append(toIndentedString(serviceTier)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    streamOptions: ").append(toIndentedString(streamOptions)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    parallelToolCalls: ").append(toIndentedString(parallelToolCalls)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    functionCall: ").append(toIndentedString(functionCall)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `messages` to the URL query string
    if (getMessages() != null) {
      for (int i = 0; i < getMessages().size(); i++) {
        if (getMessages().get(i) != null) {
          joiner.add(getMessages().get(i).toUrlQueryString(String.format("%smessages%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      joiner.add(getModel().toUrlQueryString(prefix + "model" + suffix));
    }

    // add `store` to the URL query string
    if (getStore() != null) {
      try {
        joiner.add(String.format("%sstore%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStore()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reasoning_effort` to the URL query string
    if (getReasoningEffort() != null) {
      try {
        joiner.add(String.format("%sreasoning_effort%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReasoningEffort()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `frequency_penalty` to the URL query string
    if (getFrequencyPenalty() != null) {
      try {
        joiner.add(String.format("%sfrequency_penalty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrequencyPenalty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logit_bias` to the URL query string
    if (getLogitBias() != null) {
      for (String _key : getLogitBias().keySet()) {
        try {
          joiner.add(String.format("%slogit_bias%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getLogitBias().get(_key), URLEncoder.encode(String.valueOf(getLogitBias().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `logprobs` to the URL query string
    if (getLogprobs() != null) {
      try {
        joiner.add(String.format("%slogprobs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogprobs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_logprobs` to the URL query string
    if (getTopLogprobs() != null) {
      try {
        joiner.add(String.format("%stop_logprobs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopLogprobs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_tokens` to the URL query string
    if (getMaxTokens() != null) {
      try {
        joiner.add(String.format("%smax_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_completion_tokens` to the URL query string
    if (getMaxCompletionTokens() != null) {
      try {
        joiner.add(String.format("%smax_completion_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxCompletionTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `n` to the URL query string
    if (getN() != null) {
      try {
        joiner.add(String.format("%sn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getN()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `modalities` to the URL query string
    if (getModalities() != null) {
      for (int i = 0; i < getModalities().size(); i++) {
        try {
          joiner.add(String.format("%smodalities%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getModalities().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `prediction` to the URL query string
    if (getPrediction() != null) {
      joiner.add(getPrediction().toUrlQueryString(prefix + "prediction" + suffix));
    }

    // add `audio` to the URL query string
    if (getAudio() != null) {
      joiner.add(getAudio().toUrlQueryString(prefix + "audio" + suffix));
    }

    // add `presence_penalty` to the URL query string
    if (getPresencePenalty() != null) {
      try {
        joiner.add(String.format("%spresence_penalty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPresencePenalty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `response_format` to the URL query string
    if (getResponseFormat() != null) {
      joiner.add(getResponseFormat().toUrlQueryString(prefix + "response_format" + suffix));
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `service_tier` to the URL query string
    if (getServiceTier() != null) {
      try {
        joiner.add(String.format("%sservice_tier%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServiceTier()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stop` to the URL query string
    if (getStop() != null) {
      joiner.add(getStop().toUrlQueryString(prefix + "stop" + suffix));
    }

    // add `stream` to the URL query string
    if (getStream() != null) {
      try {
        joiner.add(String.format("%sstream%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStream()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stream_options` to the URL query string
    if (getStreamOptions() != null) {
      joiner.add(getStreamOptions().toUrlQueryString(prefix + "stream_options" + suffix));
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_p` to the URL query string
    if (getTopP() != null) {
      try {
        joiner.add(String.format("%stop_p%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopP()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      for (int i = 0; i < getTools().size(); i++) {
        if (getTools().get(i) != null) {
          joiner.add(getTools().get(i).toUrlQueryString(String.format("%stools%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `tool_choice` to the URL query string
    if (getToolChoice() != null) {
      joiner.add(getToolChoice().toUrlQueryString(prefix + "tool_choice" + suffix));
    }

    // add `parallel_tool_calls` to the URL query string
    if (getParallelToolCalls() != null) {
      try {
        joiner.add(String.format("%sparallel_tool_calls%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParallelToolCalls()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      try {
        joiner.add(String.format("%suser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUser()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `function_call` to the URL query string
    if (getFunctionCall() != null) {
      joiner.add(getFunctionCall().toUrlQueryString(prefix + "function_call" + suffix));
    }

    // add `functions` to the URL query string
    if (getFunctions() != null) {
      for (int i = 0; i < getFunctions().size(); i++) {
        if (getFunctions().get(i) != null) {
          joiner.add(getFunctions().get(i).toUrlQueryString(String.format("%sfunctions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

