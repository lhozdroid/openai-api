/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the url or the content of an image generated by the OpenAI API.
 */
@JsonPropertyOrder({
  Image.JSON_PROPERTY_B64_JSON,
  Image.JSON_PROPERTY_URL,
  Image.JSON_PROPERTY_REVISED_PROMPT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-14T12:15:51.997600814-05:00[US/Eastern]", comments = "Generator version: 7.10.0")
public class Image {
  public static final String JSON_PROPERTY_B64_JSON = "b64_json";
  @javax.annotation.Nullable
  private String b64Json;

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nullable
  private String url;

  public static final String JSON_PROPERTY_REVISED_PROMPT = "revised_prompt";
  @javax.annotation.Nullable
  private String revisedPrompt;

  public Image() {
  }

  public Image b64Json(@javax.annotation.Nullable String b64Json) {
    
    this.b64Json = b64Json;
    return this;
  }

  /**
   * The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.
   * @return b64Json
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_B64_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getB64Json() {
    return b64Json;
  }


  @JsonProperty(JSON_PROPERTY_B64_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setB64Json(@javax.annotation.Nullable String b64Json) {
    this.b64Json = b64Json;
  }

  public Image url(@javax.annotation.Nullable String url) {
    
    this.url = url;
    return this;
  }

  /**
   * The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).
   * @return url
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }

  public Image revisedPrompt(@javax.annotation.Nullable String revisedPrompt) {
    
    this.revisedPrompt = revisedPrompt;
    return this;
  }

  /**
   * The prompt that was used to generate the image, if there was any revision to the prompt.
   * @return revisedPrompt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISED_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRevisedPrompt() {
    return revisedPrompt;
  }


  @JsonProperty(JSON_PROPERTY_REVISED_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevisedPrompt(@javax.annotation.Nullable String revisedPrompt) {
    this.revisedPrompt = revisedPrompt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.b64Json, image.b64Json) &&
        Objects.equals(this.url, image.url) &&
        Objects.equals(this.revisedPrompt, image.revisedPrompt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(b64Json, url, revisedPrompt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    sb.append("    b64Json: ").append(toIndentedString(b64Json)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    revisedPrompt: ").append(toIndentedString(revisedPrompt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `b64_json` to the URL query string
    if (getB64Json() != null) {
      try {
        joiner.add(String.format("%sb64_json%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getB64Json()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `revised_prompt` to the URL query string
    if (getRevisedPrompt() != null) {
      try {
        joiner.add(String.format("%srevised_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevisedPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

