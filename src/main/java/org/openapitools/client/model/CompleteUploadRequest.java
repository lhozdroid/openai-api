/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CompleteUploadRequest
 */
@JsonPropertyOrder({
  CompleteUploadRequest.JSON_PROPERTY_PART_IDS,
  CompleteUploadRequest.JSON_PROPERTY_MD5
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class CompleteUploadRequest {
  public static final String JSON_PROPERTY_PART_IDS = "part_ids";
  @javax.annotation.Nonnull
  private List<String> partIds = new ArrayList<>();

  public static final String JSON_PROPERTY_MD5 = "md5";
  @javax.annotation.Nullable
  private String md5;

  public CompleteUploadRequest() {
  }

  public CompleteUploadRequest partIds(@javax.annotation.Nonnull List<String> partIds) {
    
    this.partIds = partIds;
    return this;
  }

  public CompleteUploadRequest addPartIdsItem(String partIdsItem) {
    if (this.partIds == null) {
      this.partIds = new ArrayList<>();
    }
    this.partIds.add(partIdsItem);
    return this;
  }

  /**
   * The ordered list of Part IDs. 
   * @return partIds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PART_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getPartIds() {
    return partIds;
  }


  @JsonProperty(JSON_PROPERTY_PART_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPartIds(@javax.annotation.Nonnull List<String> partIds) {
    this.partIds = partIds;
  }

  public CompleteUploadRequest md5(@javax.annotation.Nullable String md5) {
    
    this.md5 = md5;
    return this;
  }

  /**
   * The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect. 
   * @return md5
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MD5)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMd5() {
    return md5;
  }


  @JsonProperty(JSON_PROPERTY_MD5)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMd5(@javax.annotation.Nullable String md5) {
    this.md5 = md5;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteUploadRequest completeUploadRequest = (CompleteUploadRequest) o;
    return Objects.equals(this.partIds, completeUploadRequest.partIds) &&
        Objects.equals(this.md5, completeUploadRequest.md5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partIds, md5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteUploadRequest {\n");
    sb.append("    partIds: ").append(toIndentedString(partIds)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `part_ids` to the URL query string
    if (getPartIds() != null) {
      for (int i = 0; i < getPartIds().size(); i++) {
        try {
          joiner.add(String.format("%spart_ids%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPartIds().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `md5` to the URL query string
    if (getMd5() != null) {
      try {
        joiner.add(String.format("%smd5%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMd5()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

