/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ListAuditLogsEffectiveAtParameter
 */
@JsonPropertyOrder({
  ListAuditLogsEffectiveAtParameter.JSON_PROPERTY_GT,
  ListAuditLogsEffectiveAtParameter.JSON_PROPERTY_GTE,
  ListAuditLogsEffectiveAtParameter.JSON_PROPERTY_LT,
  ListAuditLogsEffectiveAtParameter.JSON_PROPERTY_LTE
})
@JsonTypeName("list_audit_logs_effective_at_parameter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:51:07.087747877-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class ListAuditLogsEffectiveAtParameter {
  public static final String JSON_PROPERTY_GT = "gt";
  @javax.annotation.Nullable
  private Integer gt;

  public static final String JSON_PROPERTY_GTE = "gte";
  @javax.annotation.Nullable
  private Integer gte;

  public static final String JSON_PROPERTY_LT = "lt";
  @javax.annotation.Nullable
  private Integer lt;

  public static final String JSON_PROPERTY_LTE = "lte";
  @javax.annotation.Nullable
  private Integer lte;

  public ListAuditLogsEffectiveAtParameter() {
  }

  public ListAuditLogsEffectiveAtParameter gt(@javax.annotation.Nullable Integer gt) {
    
    this.gt = gt;
    return this;
  }

  /**
   * Return only events whose &#x60;effective_at&#x60; (Unix seconds) is greater than this value.
   * @return gt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGt() {
    return gt;
  }


  @JsonProperty(JSON_PROPERTY_GT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGt(@javax.annotation.Nullable Integer gt) {
    this.gt = gt;
  }

  public ListAuditLogsEffectiveAtParameter gte(@javax.annotation.Nullable Integer gte) {
    
    this.gte = gte;
    return this;
  }

  /**
   * Return only events whose &#x60;effective_at&#x60; (Unix seconds) is greater than or equal to this value.
   * @return gte
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGte() {
    return gte;
  }


  @JsonProperty(JSON_PROPERTY_GTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGte(@javax.annotation.Nullable Integer gte) {
    this.gte = gte;
  }

  public ListAuditLogsEffectiveAtParameter lt(@javax.annotation.Nullable Integer lt) {
    
    this.lt = lt;
    return this;
  }

  /**
   * Return only events whose &#x60;effective_at&#x60; (Unix seconds) is less than this value.
   * @return lt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLt() {
    return lt;
  }


  @JsonProperty(JSON_PROPERTY_LT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLt(@javax.annotation.Nullable Integer lt) {
    this.lt = lt;
  }

  public ListAuditLogsEffectiveAtParameter lte(@javax.annotation.Nullable Integer lte) {
    
    this.lte = lte;
    return this;
  }

  /**
   * Return only events whose &#x60;effective_at&#x60; (Unix seconds) is less than or equal to this value.
   * @return lte
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLte() {
    return lte;
  }


  @JsonProperty(JSON_PROPERTY_LTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLte(@javax.annotation.Nullable Integer lte) {
    this.lte = lte;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAuditLogsEffectiveAtParameter listAuditLogsEffectiveAtParameter = (ListAuditLogsEffectiveAtParameter) o;
    return Objects.equals(this.gt, listAuditLogsEffectiveAtParameter.gt) &&
        Objects.equals(this.gte, listAuditLogsEffectiveAtParameter.gte) &&
        Objects.equals(this.lt, listAuditLogsEffectiveAtParameter.lt) &&
        Objects.equals(this.lte, listAuditLogsEffectiveAtParameter.lte);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gt, gte, lt, lte);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAuditLogsEffectiveAtParameter {\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    gte: ").append(toIndentedString(gte)).append("\n");
    sb.append("    lt: ").append(toIndentedString(lt)).append("\n");
    sb.append("    lte: ").append(toIndentedString(lte)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `gt` to the URL query string
    if (getGt() != null) {
      try {
        joiner.add(String.format("%sgt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `gte` to the URL query string
    if (getGte() != null) {
      try {
        joiner.add(String.format("%sgte%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGte()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lt` to the URL query string
    if (getLt() != null) {
      try {
        joiner.add(String.format("%slt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lte` to the URL query string
    if (getLte() != null) {
      try {
        joiner.add(String.format("%slte%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLte()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

