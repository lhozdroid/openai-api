/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RealtimeResponseCreateParamsMaxResponseOutputTokens;
import org.openapitools.client.model.RealtimeResponseCreateParamsToolsInner;
import org.openapitools.client.model.RealtimeSessionCreateRequestTurnDetection;
import org.openapitools.client.model.RealtimeSessionInputAudioTranscription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Realtime session object configuration.
 */
@JsonPropertyOrder({
  RealtimeSessionCreateRequest.JSON_PROPERTY_MODALITIES,
  RealtimeSessionCreateRequest.JSON_PROPERTY_MODEL,
  RealtimeSessionCreateRequest.JSON_PROPERTY_INSTRUCTIONS,
  RealtimeSessionCreateRequest.JSON_PROPERTY_VOICE,
  RealtimeSessionCreateRequest.JSON_PROPERTY_INPUT_AUDIO_FORMAT,
  RealtimeSessionCreateRequest.JSON_PROPERTY_OUTPUT_AUDIO_FORMAT,
  RealtimeSessionCreateRequest.JSON_PROPERTY_INPUT_AUDIO_TRANSCRIPTION,
  RealtimeSessionCreateRequest.JSON_PROPERTY_TURN_DETECTION,
  RealtimeSessionCreateRequest.JSON_PROPERTY_TOOLS,
  RealtimeSessionCreateRequest.JSON_PROPERTY_TOOL_CHOICE,
  RealtimeSessionCreateRequest.JSON_PROPERTY_TEMPERATURE,
  RealtimeSessionCreateRequest.JSON_PROPERTY_MAX_RESPONSE_OUTPUT_TOKENS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-14T12:15:51.997600814-05:00[US/Eastern]", comments = "Generator version: 7.10.0")
public class RealtimeSessionCreateRequest {
  /**
   * Gets or Sets modalities
   */
  public enum ModalitiesEnum {
    TEXT(String.valueOf("text")),
    
    AUDIO(String.valueOf("audio"));

    private String value;

    ModalitiesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModalitiesEnum fromValue(String value) {
      for (ModalitiesEnum b : ModalitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODALITIES = "modalities";
  @javax.annotation.Nullable
  private List<ModalitiesEnum> modalities = new ArrayList<>();

  /**
   * The Realtime model used for this session. 
   */
  public enum ModelEnum {
    REALTIME_PREVIEW(String.valueOf("gpt-4o-realtime-preview")),
    
    REALTIME_PREVIEW_2024_10_01(String.valueOf("gpt-4o-realtime-preview-2024-10-01")),
    
    REALTIME_PREVIEW_2024_12_17(String.valueOf("gpt-4o-realtime-preview-2024-12-17")),
    
    MINI_REALTIME_PREVIEW(String.valueOf("gpt-4o-mini-realtime-preview")),
    
    MINI_REALTIME_PREVIEW_2024_12_17(String.valueOf("gpt-4o-mini-realtime-preview-2024-12-17"));

    private String value;

    ModelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModelEnum fromValue(String value) {
      for (ModelEnum b : ModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nonnull
  private ModelEnum model;

  public static final String JSON_PROPERTY_INSTRUCTIONS = "instructions";
  @javax.annotation.Nullable
  private String instructions;

  /**
   * The voice the model uses to respond. Voice cannot be changed during the  session once the model has responded with audio at least once. Current  voice options are &#x60;alloy&#x60;, &#x60;ash&#x60;, &#x60;ballad&#x60;, &#x60;coral&#x60;, &#x60;echo&#x60; &#x60;sage&#x60;,  &#x60;shimmer&#x60; and &#x60;verse&#x60;. 
   */
  public enum VoiceEnum {
    ALLOY(String.valueOf("alloy")),
    
    ASH(String.valueOf("ash")),
    
    BALLAD(String.valueOf("ballad")),
    
    CORAL(String.valueOf("coral")),
    
    ECHO(String.valueOf("echo")),
    
    SAGE(String.valueOf("sage")),
    
    SHIMMER(String.valueOf("shimmer")),
    
    VERSE(String.valueOf("verse"));

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VOICE = "voice";
  @javax.annotation.Nullable
  private VoiceEnum voice;

  /**
   * The format of input audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. 
   */
  public enum InputAudioFormatEnum {
    PCM16(String.valueOf("pcm16")),
    
    G711_ULAW(String.valueOf("g711_ulaw")),
    
    G711_ALAW(String.valueOf("g711_alaw"));

    private String value;

    InputAudioFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InputAudioFormatEnum fromValue(String value) {
      for (InputAudioFormatEnum b : InputAudioFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INPUT_AUDIO_FORMAT = "input_audio_format";
  @javax.annotation.Nullable
  private InputAudioFormatEnum inputAudioFormat;

  /**
   * The format of output audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. 
   */
  public enum OutputAudioFormatEnum {
    PCM16(String.valueOf("pcm16")),
    
    G711_ULAW(String.valueOf("g711_ulaw")),
    
    G711_ALAW(String.valueOf("g711_alaw"));

    private String value;

    OutputAudioFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OutputAudioFormatEnum fromValue(String value) {
      for (OutputAudioFormatEnum b : OutputAudioFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OUTPUT_AUDIO_FORMAT = "output_audio_format";
  @javax.annotation.Nullable
  private OutputAudioFormatEnum outputAudioFormat;

  public static final String JSON_PROPERTY_INPUT_AUDIO_TRANSCRIPTION = "input_audio_transcription";
  @javax.annotation.Nullable
  private RealtimeSessionInputAudioTranscription inputAudioTranscription;

  public static final String JSON_PROPERTY_TURN_DETECTION = "turn_detection";
  @javax.annotation.Nullable
  private RealtimeSessionCreateRequestTurnDetection turnDetection;

  public static final String JSON_PROPERTY_TOOLS = "tools";
  @javax.annotation.Nullable
  private List<RealtimeResponseCreateParamsToolsInner> tools = new ArrayList<>();

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  @javax.annotation.Nullable
  private String toolChoice;

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @javax.annotation.Nullable
  private BigDecimal temperature;

  public static final String JSON_PROPERTY_MAX_RESPONSE_OUTPUT_TOKENS = "max_response_output_tokens";
  @javax.annotation.Nullable
  private RealtimeResponseCreateParamsMaxResponseOutputTokens maxResponseOutputTokens;

  public RealtimeSessionCreateRequest() {
  }

  public RealtimeSessionCreateRequest modalities(@javax.annotation.Nullable List<ModalitiesEnum> modalities) {
    
    this.modalities = modalities;
    return this;
  }

  public RealtimeSessionCreateRequest addModalitiesItem(ModalitiesEnum modalitiesItem) {
    if (this.modalities == null) {
      this.modalities = new ArrayList<>();
    }
    this.modalities.add(modalitiesItem);
    return this;
  }

  /**
   * The set of modalities the model can respond with. To disable audio, set this to [\&quot;text\&quot;]. 
   * @return modalities
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODALITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ModalitiesEnum> getModalities() {
    return modalities;
  }


  @JsonProperty(JSON_PROPERTY_MODALITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModalities(@javax.annotation.Nullable List<ModalitiesEnum> modalities) {
    this.modalities = modalities;
  }

  public RealtimeSessionCreateRequest model(@javax.annotation.Nonnull ModelEnum model) {
    
    this.model = model;
    return this;
  }

  /**
   * The Realtime model used for this session. 
   * @return model
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ModelEnum getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@javax.annotation.Nonnull ModelEnum model) {
    this.model = model;
  }

  public RealtimeSessionCreateRequest instructions(@javax.annotation.Nullable String instructions) {
    
    this.instructions = instructions;
    return this;
  }

  /**
   * The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \&quot;be extremely succinct\&quot;, \&quot;act friendly\&quot;, \&quot;here are examples of good  responses\&quot;) and on audio behavior (e.g. \&quot;talk quickly\&quot;, \&quot;inject emotion  into your voice\&quot;, \&quot;laugh frequently\&quot;). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the  desired behavior.  Note that the server sets default instructions which will be used if this  field is not set and are visible in the &#x60;session.created&#x60; event at the  start of the session. 
   * @return instructions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInstructions() {
    return instructions;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstructions(@javax.annotation.Nullable String instructions) {
    this.instructions = instructions;
  }

  public RealtimeSessionCreateRequest voice(@javax.annotation.Nullable VoiceEnum voice) {
    
    this.voice = voice;
    return this;
  }

  /**
   * The voice the model uses to respond. Voice cannot be changed during the  session once the model has responded with audio at least once. Current  voice options are &#x60;alloy&#x60;, &#x60;ash&#x60;, &#x60;ballad&#x60;, &#x60;coral&#x60;, &#x60;echo&#x60; &#x60;sage&#x60;,  &#x60;shimmer&#x60; and &#x60;verse&#x60;. 
   * @return voice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VoiceEnum getVoice() {
    return voice;
  }


  @JsonProperty(JSON_PROPERTY_VOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVoice(@javax.annotation.Nullable VoiceEnum voice) {
    this.voice = voice;
  }

  public RealtimeSessionCreateRequest inputAudioFormat(@javax.annotation.Nullable InputAudioFormatEnum inputAudioFormat) {
    
    this.inputAudioFormat = inputAudioFormat;
    return this;
  }

  /**
   * The format of input audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. 
   * @return inputAudioFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InputAudioFormatEnum getInputAudioFormat() {
    return inputAudioFormat;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputAudioFormat(@javax.annotation.Nullable InputAudioFormatEnum inputAudioFormat) {
    this.inputAudioFormat = inputAudioFormat;
  }

  public RealtimeSessionCreateRequest outputAudioFormat(@javax.annotation.Nullable OutputAudioFormatEnum outputAudioFormat) {
    
    this.outputAudioFormat = outputAudioFormat;
    return this;
  }

  /**
   * The format of output audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. 
   * @return outputAudioFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_AUDIO_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutputAudioFormatEnum getOutputAudioFormat() {
    return outputAudioFormat;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_AUDIO_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputAudioFormat(@javax.annotation.Nullable OutputAudioFormatEnum outputAudioFormat) {
    this.outputAudioFormat = outputAudioFormat;
  }

  public RealtimeSessionCreateRequest inputAudioTranscription(@javax.annotation.Nullable RealtimeSessionInputAudioTranscription inputAudioTranscription) {
    
    this.inputAudioTranscription = inputAudioTranscription;
    return this;
  }

  /**
   * Get inputAudioTranscription
   * @return inputAudioTranscription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_TRANSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RealtimeSessionInputAudioTranscription getInputAudioTranscription() {
    return inputAudioTranscription;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_TRANSCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputAudioTranscription(@javax.annotation.Nullable RealtimeSessionInputAudioTranscription inputAudioTranscription) {
    this.inputAudioTranscription = inputAudioTranscription;
  }

  public RealtimeSessionCreateRequest turnDetection(@javax.annotation.Nullable RealtimeSessionCreateRequestTurnDetection turnDetection) {
    
    this.turnDetection = turnDetection;
    return this;
  }

  /**
   * Get turnDetection
   * @return turnDetection
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TURN_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RealtimeSessionCreateRequestTurnDetection getTurnDetection() {
    return turnDetection;
  }


  @JsonProperty(JSON_PROPERTY_TURN_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTurnDetection(@javax.annotation.Nullable RealtimeSessionCreateRequestTurnDetection turnDetection) {
    this.turnDetection = turnDetection;
  }

  public RealtimeSessionCreateRequest tools(@javax.annotation.Nullable List<RealtimeResponseCreateParamsToolsInner> tools) {
    
    this.tools = tools;
    return this;
  }

  public RealtimeSessionCreateRequest addToolsItem(RealtimeResponseCreateParamsToolsInner toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

  /**
   * Tools (functions) available to the model.
   * @return tools
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RealtimeResponseCreateParamsToolsInner> getTools() {
    return tools;
  }


  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTools(@javax.annotation.Nullable List<RealtimeResponseCreateParamsToolsInner> tools) {
    this.tools = tools;
  }

  public RealtimeSessionCreateRequest toolChoice(@javax.annotation.Nullable String toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

  /**
   * How the model chooses tools. Options are &#x60;auto&#x60;, &#x60;none&#x60;, &#x60;required&#x60;, or  specify a function. 
   * @return toolChoice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolChoice(@javax.annotation.Nullable String toolChoice) {
    this.toolChoice = toolChoice;
  }

  public RealtimeSessionCreateRequest temperature(@javax.annotation.Nullable BigDecimal temperature) {
    
    this.temperature = temperature;
    return this;
  }

  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
   * @return temperature
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTemperature() {
    return temperature;
  }


  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = temperature;
  }

  public RealtimeSessionCreateRequest maxResponseOutputTokens(@javax.annotation.Nullable RealtimeResponseCreateParamsMaxResponseOutputTokens maxResponseOutputTokens) {
    
    this.maxResponseOutputTokens = maxResponseOutputTokens;
    return this;
  }

  /**
   * Get maxResponseOutputTokens
   * @return maxResponseOutputTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_RESPONSE_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RealtimeResponseCreateParamsMaxResponseOutputTokens getMaxResponseOutputTokens() {
    return maxResponseOutputTokens;
  }


  @JsonProperty(JSON_PROPERTY_MAX_RESPONSE_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxResponseOutputTokens(@javax.annotation.Nullable RealtimeResponseCreateParamsMaxResponseOutputTokens maxResponseOutputTokens) {
    this.maxResponseOutputTokens = maxResponseOutputTokens;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeSessionCreateRequest realtimeSessionCreateRequest = (RealtimeSessionCreateRequest) o;
    return Objects.equals(this.modalities, realtimeSessionCreateRequest.modalities) &&
        Objects.equals(this.model, realtimeSessionCreateRequest.model) &&
        Objects.equals(this.instructions, realtimeSessionCreateRequest.instructions) &&
        Objects.equals(this.voice, realtimeSessionCreateRequest.voice) &&
        Objects.equals(this.inputAudioFormat, realtimeSessionCreateRequest.inputAudioFormat) &&
        Objects.equals(this.outputAudioFormat, realtimeSessionCreateRequest.outputAudioFormat) &&
        Objects.equals(this.inputAudioTranscription, realtimeSessionCreateRequest.inputAudioTranscription) &&
        Objects.equals(this.turnDetection, realtimeSessionCreateRequest.turnDetection) &&
        Objects.equals(this.tools, realtimeSessionCreateRequest.tools) &&
        Objects.equals(this.toolChoice, realtimeSessionCreateRequest.toolChoice) &&
        Objects.equals(this.temperature, realtimeSessionCreateRequest.temperature) &&
        Objects.equals(this.maxResponseOutputTokens, realtimeSessionCreateRequest.maxResponseOutputTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modalities, model, instructions, voice, inputAudioFormat, outputAudioFormat, inputAudioTranscription, turnDetection, tools, toolChoice, temperature, maxResponseOutputTokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeSessionCreateRequest {\n");
    sb.append("    modalities: ").append(toIndentedString(modalities)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("    inputAudioFormat: ").append(toIndentedString(inputAudioFormat)).append("\n");
    sb.append("    outputAudioFormat: ").append(toIndentedString(outputAudioFormat)).append("\n");
    sb.append("    inputAudioTranscription: ").append(toIndentedString(inputAudioTranscription)).append("\n");
    sb.append("    turnDetection: ").append(toIndentedString(turnDetection)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    maxResponseOutputTokens: ").append(toIndentedString(maxResponseOutputTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `modalities` to the URL query string
    if (getModalities() != null) {
      for (int i = 0; i < getModalities().size(); i++) {
        try {
          joiner.add(String.format("%smodalities%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getModalities().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      try {
        joiner.add(String.format("%smodel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `instructions` to the URL query string
    if (getInstructions() != null) {
      try {
        joiner.add(String.format("%sinstructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstructions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `voice` to the URL query string
    if (getVoice() != null) {
      try {
        joiner.add(String.format("%svoice%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVoice()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_audio_format` to the URL query string
    if (getInputAudioFormat() != null) {
      try {
        joiner.add(String.format("%sinput_audio_format%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputAudioFormat()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output_audio_format` to the URL query string
    if (getOutputAudioFormat() != null) {
      try {
        joiner.add(String.format("%soutput_audio_format%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputAudioFormat()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_audio_transcription` to the URL query string
    if (getInputAudioTranscription() != null) {
      joiner.add(getInputAudioTranscription().toUrlQueryString(prefix + "input_audio_transcription" + suffix));
    }

    // add `turn_detection` to the URL query string
    if (getTurnDetection() != null) {
      joiner.add(getTurnDetection().toUrlQueryString(prefix + "turn_detection" + suffix));
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      for (int i = 0; i < getTools().size(); i++) {
        if (getTools().get(i) != null) {
          joiner.add(getTools().get(i).toUrlQueryString(String.format("%stools%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `tool_choice` to the URL query string
    if (getToolChoice() != null) {
      try {
        joiner.add(String.format("%stool_choice%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getToolChoice()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_response_output_tokens` to the URL query string
    if (getMaxResponseOutputTokens() != null) {
      joiner.add(getMaxResponseOutputTokens().toUrlQueryString(prefix + "max_response_output_tokens" + suffix));
    }

    return joiner.toString();
  }

}

