/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openai.openapi.model.AssistantObjectResponseFormat;
import com.openai.openapi.model.AssistantObjectToolsInner;
import com.openai.openapi.model.CreateRunRequestToolChoice;
import com.openai.openapi.model.CreateRunRequestTruncationStrategy;
import com.openai.openapi.model.RunCompletionUsage;
import com.openai.openapi.model.RunObjectIncompleteDetails;
import com.openai.openapi.model.RunObjectLastError;
import com.openai.openapi.model.RunObjectRequiredAction;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents an execution run on a [thread](/docs/api-reference/threads).
 */
@JsonPropertyOrder({
  RunObject.JSON_PROPERTY_ID,
  RunObject.JSON_PROPERTY_OBJECT,
  RunObject.JSON_PROPERTY_CREATED_AT,
  RunObject.JSON_PROPERTY_THREAD_ID,
  RunObject.JSON_PROPERTY_ASSISTANT_ID,
  RunObject.JSON_PROPERTY_STATUS,
  RunObject.JSON_PROPERTY_REQUIRED_ACTION,
  RunObject.JSON_PROPERTY_LAST_ERROR,
  RunObject.JSON_PROPERTY_EXPIRES_AT,
  RunObject.JSON_PROPERTY_STARTED_AT,
  RunObject.JSON_PROPERTY_CANCELLED_AT,
  RunObject.JSON_PROPERTY_FAILED_AT,
  RunObject.JSON_PROPERTY_COMPLETED_AT,
  RunObject.JSON_PROPERTY_INCOMPLETE_DETAILS,
  RunObject.JSON_PROPERTY_MODEL,
  RunObject.JSON_PROPERTY_INSTRUCTIONS,
  RunObject.JSON_PROPERTY_TOOLS,
  RunObject.JSON_PROPERTY_METADATA,
  RunObject.JSON_PROPERTY_USAGE,
  RunObject.JSON_PROPERTY_TEMPERATURE,
  RunObject.JSON_PROPERTY_TOP_P,
  RunObject.JSON_PROPERTY_MAX_PROMPT_TOKENS,
  RunObject.JSON_PROPERTY_MAX_COMPLETION_TOKENS,
  RunObject.JSON_PROPERTY_TRUNCATION_STRATEGY,
  RunObject.JSON_PROPERTY_TOOL_CHOICE,
  RunObject.JSON_PROPERTY_PARALLEL_TOOL_CALLS,
  RunObject.JSON_PROPERTY_RESPONSE_FORMAT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class RunObject {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  /**
   * The object type, which is always &#x60;thread.run&#x60;.
   */
  public enum ObjectEnum {
    THREAD_RUN(String.valueOf("thread.run"));

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OBJECT = "object";
  @javax.annotation.Nonnull
  private ObjectEnum _object;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private Integer createdAt;

  public static final String JSON_PROPERTY_THREAD_ID = "thread_id";
  @javax.annotation.Nonnull
  private String threadId;

  public static final String JSON_PROPERTY_ASSISTANT_ID = "assistant_id";
  @javax.annotation.Nonnull
  private String assistantId;

  /**
   * The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, &#x60;incomplete&#x60;, or &#x60;expired&#x60;.
   */
  public enum StatusEnum {
    QUEUED(String.valueOf("queued")),
    
    IN_PROGRESS(String.valueOf("in_progress")),
    
    REQUIRES_ACTION(String.valueOf("requires_action")),
    
    CANCELLING(String.valueOf("cancelling")),
    
    CANCELLED(String.valueOf("cancelled")),
    
    FAILED(String.valueOf("failed")),
    
    COMPLETED(String.valueOf("completed")),
    
    INCOMPLETE(String.valueOf("incomplete")),
    
    EXPIRED(String.valueOf("expired"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String JSON_PROPERTY_REQUIRED_ACTION = "required_action";
  @javax.annotation.Nullable
  private RunObjectRequiredAction requiredAction;

  public static final String JSON_PROPERTY_LAST_ERROR = "last_error";
  @javax.annotation.Nullable
  private RunObjectLastError lastError;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expires_at";
  @javax.annotation.Nullable
  private Integer expiresAt;

  public static final String JSON_PROPERTY_STARTED_AT = "started_at";
  @javax.annotation.Nullable
  private Integer startedAt;

  public static final String JSON_PROPERTY_CANCELLED_AT = "cancelled_at";
  @javax.annotation.Nullable
  private Integer cancelledAt;

  public static final String JSON_PROPERTY_FAILED_AT = "failed_at";
  @javax.annotation.Nullable
  private Integer failedAt;

  public static final String JSON_PROPERTY_COMPLETED_AT = "completed_at";
  @javax.annotation.Nullable
  private Integer completedAt;

  public static final String JSON_PROPERTY_INCOMPLETE_DETAILS = "incomplete_details";
  @javax.annotation.Nullable
  private RunObjectIncompleteDetails incompleteDetails;

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nonnull
  private String model;

  public static final String JSON_PROPERTY_INSTRUCTIONS = "instructions";
  @javax.annotation.Nonnull
  private String instructions;

  public static final String JSON_PROPERTY_TOOLS = "tools";
  @javax.annotation.Nonnull
  private List<AssistantObjectToolsInner> tools = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Map<String, String> metadata;

  public static final String JSON_PROPERTY_USAGE = "usage";
  @javax.annotation.Nullable
  private RunCompletionUsage usage;

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> topP = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_MAX_PROMPT_TOKENS = "max_prompt_tokens";
  @javax.annotation.Nullable
  private Integer maxPromptTokens;

  public static final String JSON_PROPERTY_MAX_COMPLETION_TOKENS = "max_completion_tokens";
  @javax.annotation.Nullable
  private Integer maxCompletionTokens;

  public static final String JSON_PROPERTY_TRUNCATION_STRATEGY = "truncation_strategy";
  @javax.annotation.Nonnull
  private CreateRunRequestTruncationStrategy truncationStrategy;

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  @javax.annotation.Nonnull
  private CreateRunRequestToolChoice toolChoice;

  public static final String JSON_PROPERTY_PARALLEL_TOOL_CALLS = "parallel_tool_calls";
  @javax.annotation.Nonnull
  private Boolean parallelToolCalls = true;

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  @javax.annotation.Nonnull
  private AssistantObjectResponseFormat responseFormat;

  public RunObject() {
  }

  public RunObject id(@javax.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * The identifier, which can be referenced in API endpoints.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public RunObject _object(@javax.annotation.Nonnull ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

  /**
   * The object type, which is always &#x60;thread.run&#x60;.
   * @return _object
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectEnum getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObject(@javax.annotation.Nonnull ObjectEnum _object) {
    this._object = _object;
  }

  public RunObject createdAt(@javax.annotation.Nonnull Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull Integer createdAt) {
    this.createdAt = createdAt;
  }

  public RunObject threadId(@javax.annotation.Nonnull String threadId) {
    
    this.threadId = threadId;
    return this;
  }

  /**
   * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
   * @return threadId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THREAD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getThreadId() {
    return threadId;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreadId(@javax.annotation.Nonnull String threadId) {
    this.threadId = threadId;
  }

  public RunObject assistantId(@javax.annotation.Nonnull String assistantId) {
    
    this.assistantId = assistantId;
    return this;
  }

  /**
   * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
   * @return assistantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ASSISTANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAssistantId() {
    return assistantId;
  }


  @JsonProperty(JSON_PROPERTY_ASSISTANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssistantId(@javax.annotation.Nonnull String assistantId) {
    this.assistantId = assistantId;
  }

  public RunObject status(@javax.annotation.Nonnull StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, &#x60;incomplete&#x60;, or &#x60;expired&#x60;.
   * @return status
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }

  public RunObject requiredAction(@javax.annotation.Nullable RunObjectRequiredAction requiredAction) {
    
    this.requiredAction = requiredAction;
    return this;
  }

  /**
   * Get requiredAction
   * @return requiredAction
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRED_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RunObjectRequiredAction getRequiredAction() {
    return requiredAction;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequiredAction(@javax.annotation.Nullable RunObjectRequiredAction requiredAction) {
    this.requiredAction = requiredAction;
  }

  public RunObject lastError(@javax.annotation.Nullable RunObjectLastError lastError) {
    
    this.lastError = lastError;
    return this;
  }

  /**
   * Get lastError
   * @return lastError
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RunObjectLastError getLastError() {
    return lastError;
  }


  @JsonProperty(JSON_PROPERTY_LAST_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastError(@javax.annotation.Nullable RunObjectLastError lastError) {
    this.lastError = lastError;
  }

  public RunObject expiresAt(@javax.annotation.Nullable Integer expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run will expire.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@javax.annotation.Nullable Integer expiresAt) {
    this.expiresAt = expiresAt;
  }

  public RunObject startedAt(@javax.annotation.Nullable Integer startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run was started.
   * @return startedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStartedAt() {
    return startedAt;
  }


  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartedAt(@javax.annotation.Nullable Integer startedAt) {
    this.startedAt = startedAt;
  }

  public RunObject cancelledAt(@javax.annotation.Nullable Integer cancelledAt) {
    
    this.cancelledAt = cancelledAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run was cancelled.
   * @return cancelledAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELLED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCancelledAt() {
    return cancelledAt;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCancelledAt(@javax.annotation.Nullable Integer cancelledAt) {
    this.cancelledAt = cancelledAt;
  }

  public RunObject failedAt(@javax.annotation.Nullable Integer failedAt) {
    
    this.failedAt = failedAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run failed.
   * @return failedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAILED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFailedAt() {
    return failedAt;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFailedAt(@javax.annotation.Nullable Integer failedAt) {
    this.failedAt = failedAt;
  }

  public RunObject completedAt(@javax.annotation.Nullable Integer completedAt) {
    
    this.completedAt = completedAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) for when the run was completed.
   * @return completedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPLETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCompletedAt() {
    return completedAt;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompletedAt(@javax.annotation.Nullable Integer completedAt) {
    this.completedAt = completedAt;
  }

  public RunObject incompleteDetails(@javax.annotation.Nullable RunObjectIncompleteDetails incompleteDetails) {
    
    this.incompleteDetails = incompleteDetails;
    return this;
  }

  /**
   * Get incompleteDetails
   * @return incompleteDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCOMPLETE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RunObjectIncompleteDetails getIncompleteDetails() {
    return incompleteDetails;
  }


  @JsonProperty(JSON_PROPERTY_INCOMPLETE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncompleteDetails(@javax.annotation.Nullable RunObjectIncompleteDetails incompleteDetails) {
    this.incompleteDetails = incompleteDetails;
  }

  public RunObject model(@javax.annotation.Nonnull String model) {
    
    this.model = model;
    return this;
  }

  /**
   * The model that the [assistant](/docs/api-reference/assistants) used for this run.
   * @return model
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(@javax.annotation.Nonnull String model) {
    this.model = model;
  }

  public RunObject instructions(@javax.annotation.Nonnull String instructions) {
    
    this.instructions = instructions;
    return this;
  }

  /**
   * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
   * @return instructions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInstructions() {
    return instructions;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstructions(@javax.annotation.Nonnull String instructions) {
    this.instructions = instructions;
  }

  public RunObject tools(@javax.annotation.Nonnull List<AssistantObjectToolsInner> tools) {
    
    this.tools = tools;
    return this;
  }

  public RunObject addToolsItem(AssistantObjectToolsInner toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

  /**
   * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
   * @return tools
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AssistantObjectToolsInner> getTools() {
    return tools;
  }


  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTools(@javax.annotation.Nonnull List<AssistantObjectToolsInner> tools) {
    this.tools = tools;
  }

  public RunObject metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public RunObject putMetadataItem(String key, String metadataItem) {
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }

  public RunObject usage(@javax.annotation.Nullable RunCompletionUsage usage) {
    
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RunCompletionUsage getUsage() {
    return usage;
  }


  @JsonProperty(JSON_PROPERTY_USAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsage(@javax.annotation.Nullable RunCompletionUsage usage) {
    this.usage = usage;
  }

  public RunObject temperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

  /**
   * The sampling temperature used for this run. If not set, defaults to 1.
   * @return temperature
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }

  public RunObject topP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
    
    return this;
  }

  /**
   * The nucleus sampling value used for this run. If not set, defaults to 1.
   * @return topP
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTopP() {
        return topP.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTopP_JsonNullable() {
    return topP;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_P)
  public void setTopP_JsonNullable(JsonNullable<BigDecimal> topP) {
    this.topP = topP;
  }

  public void setTopP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
  }

  public RunObject maxPromptTokens(@javax.annotation.Nullable Integer maxPromptTokens) {
    
    this.maxPromptTokens = maxPromptTokens;
    return this;
  }

  /**
   * The maximum number of prompt tokens specified to have been used over the course of the run. 
   * minimum: 256
   * @return maxPromptTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_PROMPT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxPromptTokens() {
    return maxPromptTokens;
  }


  @JsonProperty(JSON_PROPERTY_MAX_PROMPT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxPromptTokens(@javax.annotation.Nullable Integer maxPromptTokens) {
    this.maxPromptTokens = maxPromptTokens;
  }

  public RunObject maxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    
    this.maxCompletionTokens = maxCompletionTokens;
    return this;
  }

  /**
   * The maximum number of completion tokens specified to have been used over the course of the run. 
   * minimum: 256
   * @return maxCompletionTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxCompletionTokens() {
    return maxCompletionTokens;
  }


  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    this.maxCompletionTokens = maxCompletionTokens;
  }

  public RunObject truncationStrategy(@javax.annotation.Nonnull CreateRunRequestTruncationStrategy truncationStrategy) {
    
    this.truncationStrategy = truncationStrategy;
    return this;
  }

  /**
   * Get truncationStrategy
   * @return truncationStrategy
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRUNCATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateRunRequestTruncationStrategy getTruncationStrategy() {
    return truncationStrategy;
  }


  @JsonProperty(JSON_PROPERTY_TRUNCATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTruncationStrategy(@javax.annotation.Nonnull CreateRunRequestTruncationStrategy truncationStrategy) {
    this.truncationStrategy = truncationStrategy;
  }

  public RunObject toolChoice(@javax.annotation.Nonnull CreateRunRequestToolChoice toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

  /**
   * Get toolChoice
   * @return toolChoice
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateRunRequestToolChoice getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolChoice(@javax.annotation.Nonnull CreateRunRequestToolChoice toolChoice) {
    this.toolChoice = toolChoice;
  }

  public RunObject parallelToolCalls(@javax.annotation.Nonnull Boolean parallelToolCalls) {
    
    this.parallelToolCalls = parallelToolCalls;
    return this;
  }

  /**
   * Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
   * @return parallelToolCalls
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getParallelToolCalls() {
    return parallelToolCalls;
  }


  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParallelToolCalls(@javax.annotation.Nonnull Boolean parallelToolCalls) {
    this.parallelToolCalls = parallelToolCalls;
  }

  public RunObject responseFormat(@javax.annotation.Nonnull AssistantObjectResponseFormat responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

  /**
   * Get responseFormat
   * @return responseFormat
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AssistantObjectResponseFormat getResponseFormat() {
    return responseFormat;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResponseFormat(@javax.annotation.Nonnull AssistantObjectResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunObject runObject = (RunObject) o;
    return Objects.equals(this.id, runObject.id) &&
        Objects.equals(this._object, runObject._object) &&
        Objects.equals(this.createdAt, runObject.createdAt) &&
        Objects.equals(this.threadId, runObject.threadId) &&
        Objects.equals(this.assistantId, runObject.assistantId) &&
        Objects.equals(this.status, runObject.status) &&
        Objects.equals(this.requiredAction, runObject.requiredAction) &&
        Objects.equals(this.lastError, runObject.lastError) &&
        Objects.equals(this.expiresAt, runObject.expiresAt) &&
        Objects.equals(this.startedAt, runObject.startedAt) &&
        Objects.equals(this.cancelledAt, runObject.cancelledAt) &&
        Objects.equals(this.failedAt, runObject.failedAt) &&
        Objects.equals(this.completedAt, runObject.completedAt) &&
        Objects.equals(this.incompleteDetails, runObject.incompleteDetails) &&
        Objects.equals(this.model, runObject.model) &&
        Objects.equals(this.instructions, runObject.instructions) &&
        Objects.equals(this.tools, runObject.tools) &&
        Objects.equals(this.metadata, runObject.metadata) &&
        Objects.equals(this.usage, runObject.usage) &&
        equalsNullable(this.temperature, runObject.temperature) &&
        equalsNullable(this.topP, runObject.topP) &&
        Objects.equals(this.maxPromptTokens, runObject.maxPromptTokens) &&
        Objects.equals(this.maxCompletionTokens, runObject.maxCompletionTokens) &&
        Objects.equals(this.truncationStrategy, runObject.truncationStrategy) &&
        Objects.equals(this.toolChoice, runObject.toolChoice) &&
        Objects.equals(this.parallelToolCalls, runObject.parallelToolCalls) &&
        Objects.equals(this.responseFormat, runObject.responseFormat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt, startedAt, cancelledAt, failedAt, completedAt, incompleteDetails, model, instructions, tools, metadata, usage, hashCodeNullable(temperature), hashCodeNullable(topP), maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, parallelToolCalls, responseFormat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunObject {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    assistantId: ").append(toIndentedString(assistantId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    requiredAction: ").append(toIndentedString(requiredAction)).append("\n");
    sb.append("    lastError: ").append(toIndentedString(lastError)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    cancelledAt: ").append(toIndentedString(cancelledAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    incompleteDetails: ").append(toIndentedString(incompleteDetails)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    maxPromptTokens: ").append(toIndentedString(maxPromptTokens)).append("\n");
    sb.append("    maxCompletionTokens: ").append(toIndentedString(maxCompletionTokens)).append("\n");
    sb.append("    truncationStrategy: ").append(toIndentedString(truncationStrategy)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    parallelToolCalls: ").append(toIndentedString(parallelToolCalls)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `object` to the URL query string
    if (getObject() != null) {
      try {
        joiner.add(String.format("%sobject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getObject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `thread_id` to the URL query string
    if (getThreadId() != null) {
      try {
        joiner.add(String.format("%sthread_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreadId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `assistant_id` to the URL query string
    if (getAssistantId() != null) {
      try {
        joiner.add(String.format("%sassistant_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssistantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `required_action` to the URL query string
    if (getRequiredAction() != null) {
      joiner.add(getRequiredAction().toUrlQueryString(prefix + "required_action" + suffix));
    }

    // add `last_error` to the URL query string
    if (getLastError() != null) {
      joiner.add(getLastError().toUrlQueryString(prefix + "last_error" + suffix));
    }

    // add `expires_at` to the URL query string
    if (getExpiresAt() != null) {
      try {
        joiner.add(String.format("%sexpires_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `started_at` to the URL query string
    if (getStartedAt() != null) {
      try {
        joiner.add(String.format("%sstarted_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `cancelled_at` to the URL query string
    if (getCancelledAt() != null) {
      try {
        joiner.add(String.format("%scancelled_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCancelledAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `failed_at` to the URL query string
    if (getFailedAt() != null) {
      try {
        joiner.add(String.format("%sfailed_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFailedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `completed_at` to the URL query string
    if (getCompletedAt() != null) {
      try {
        joiner.add(String.format("%scompleted_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCompletedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `incomplete_details` to the URL query string
    if (getIncompleteDetails() != null) {
      joiner.add(getIncompleteDetails().toUrlQueryString(prefix + "incomplete_details" + suffix));
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      try {
        joiner.add(String.format("%smodel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `instructions` to the URL query string
    if (getInstructions() != null) {
      try {
        joiner.add(String.format("%sinstructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstructions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      for (int i = 0; i < getTools().size(); i++) {
        if (getTools().get(i) != null) {
          joiner.add(getTools().get(i).toUrlQueryString(String.format("%stools%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `usage` to the URL query string
    if (getUsage() != null) {
      joiner.add(getUsage().toUrlQueryString(prefix + "usage" + suffix));
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_p` to the URL query string
    if (getTopP() != null) {
      try {
        joiner.add(String.format("%stop_p%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopP()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_prompt_tokens` to the URL query string
    if (getMaxPromptTokens() != null) {
      try {
        joiner.add(String.format("%smax_prompt_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxPromptTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_completion_tokens` to the URL query string
    if (getMaxCompletionTokens() != null) {
      try {
        joiner.add(String.format("%smax_completion_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxCompletionTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `truncation_strategy` to the URL query string
    if (getTruncationStrategy() != null) {
      joiner.add(getTruncationStrategy().toUrlQueryString(prefix + "truncation_strategy" + suffix));
    }

    // add `tool_choice` to the URL query string
    if (getToolChoice() != null) {
      joiner.add(getToolChoice().toUrlQueryString(prefix + "tool_choice" + suffix));
    }

    // add `parallel_tool_calls` to the URL query string
    if (getParallelToolCalls() != null) {
      try {
        joiner.add(String.format("%sparallel_tool_calls%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParallelToolCalls()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `response_format` to the URL query string
    if (getResponseFormat() != null) {
      joiner.add(getResponseFormat().toUrlQueryString(prefix + "response_format" + suffix));
    }

    return joiner.toString();
  }

}

