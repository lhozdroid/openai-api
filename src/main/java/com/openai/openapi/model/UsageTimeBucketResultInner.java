/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openai.openapi.model.CostsResult;
import com.openai.openapi.model.CostsResultAmount;
import com.openai.openapi.model.UsageAudioSpeechesResult;
import com.openai.openapi.model.UsageAudioTranscriptionsResult;
import com.openai.openapi.model.UsageCodeInterpreterSessionsResult;
import com.openai.openapi.model.UsageCompletionsResult;
import com.openai.openapi.model.UsageEmbeddingsResult;
import com.openai.openapi.model.UsageImagesResult;
import com.openai.openapi.model.UsageModerationsResult;
import com.openai.openapi.model.UsageVectorStoresResult;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UsageTimeBucketResultInner
 */
@JsonPropertyOrder({
  UsageTimeBucketResultInner.JSON_PROPERTY_OBJECT,
  UsageTimeBucketResultInner.JSON_PROPERTY_INPUT_TOKENS,
  UsageTimeBucketResultInner.JSON_PROPERTY_INPUT_CACHED_TOKENS,
  UsageTimeBucketResultInner.JSON_PROPERTY_OUTPUT_TOKENS,
  UsageTimeBucketResultInner.JSON_PROPERTY_INPUT_AUDIO_TOKENS,
  UsageTimeBucketResultInner.JSON_PROPERTY_OUTPUT_AUDIO_TOKENS,
  UsageTimeBucketResultInner.JSON_PROPERTY_NUM_MODEL_REQUESTS,
  UsageTimeBucketResultInner.JSON_PROPERTY_PROJECT_ID,
  UsageTimeBucketResultInner.JSON_PROPERTY_USER_ID,
  UsageTimeBucketResultInner.JSON_PROPERTY_API_KEY_ID,
  UsageTimeBucketResultInner.JSON_PROPERTY_MODEL,
  UsageTimeBucketResultInner.JSON_PROPERTY_BATCH,
  UsageTimeBucketResultInner.JSON_PROPERTY_IMAGES,
  UsageTimeBucketResultInner.JSON_PROPERTY_SOURCE,
  UsageTimeBucketResultInner.JSON_PROPERTY_SIZE,
  UsageTimeBucketResultInner.JSON_PROPERTY_CHARACTERS,
  UsageTimeBucketResultInner.JSON_PROPERTY_SECONDS,
  UsageTimeBucketResultInner.JSON_PROPERTY_USAGE_BYTES,
  UsageTimeBucketResultInner.JSON_PROPERTY_NUM_SESSIONS,
  UsageTimeBucketResultInner.JSON_PROPERTY_AMOUNT,
  UsageTimeBucketResultInner.JSON_PROPERTY_LINE_ITEM
})
@JsonTypeName("UsageTimeBucket_result_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class UsageTimeBucketResultInner {
  /**
   * Gets or Sets _object
   */
  public enum ObjectEnum {
    ORGANIZATION_COSTS_RESULT(String.valueOf("organization.costs.result"));

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OBJECT = "object";
  @javax.annotation.Nonnull
  private ObjectEnum _object;

  public static final String JSON_PROPERTY_INPUT_TOKENS = "input_tokens";
  @javax.annotation.Nonnull
  private Integer inputTokens;

  public static final String JSON_PROPERTY_INPUT_CACHED_TOKENS = "input_cached_tokens";
  @javax.annotation.Nullable
  private Integer inputCachedTokens;

  public static final String JSON_PROPERTY_OUTPUT_TOKENS = "output_tokens";
  @javax.annotation.Nonnull
  private Integer outputTokens;

  public static final String JSON_PROPERTY_INPUT_AUDIO_TOKENS = "input_audio_tokens";
  @javax.annotation.Nullable
  private Integer inputAudioTokens;

  public static final String JSON_PROPERTY_OUTPUT_AUDIO_TOKENS = "output_audio_tokens";
  @javax.annotation.Nullable
  private Integer outputAudioTokens;

  public static final String JSON_PROPERTY_NUM_MODEL_REQUESTS = "num_model_requests";
  @javax.annotation.Nonnull
  private Integer numModelRequests;

  public static final String JSON_PROPERTY_PROJECT_ID = "project_id";
  @javax.annotation.Nullable
  private JsonNullable<String> projectId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  @javax.annotation.Nullable
  private JsonNullable<String> userId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_API_KEY_ID = "api_key_id";
  @javax.annotation.Nullable
  private JsonNullable<String> apiKeyId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nullable
  private JsonNullable<String> model = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BATCH = "batch";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> batch = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_IMAGES = "images";
  @javax.annotation.Nonnull
  private Integer images;

  public static final String JSON_PROPERTY_SOURCE = "source";
  @javax.annotation.Nullable
  private JsonNullable<String> source = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SIZE = "size";
  @javax.annotation.Nullable
  private JsonNullable<String> size = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CHARACTERS = "characters";
  @javax.annotation.Nonnull
  private Integer characters;

  public static final String JSON_PROPERTY_SECONDS = "seconds";
  @javax.annotation.Nonnull
  private Integer seconds;

  public static final String JSON_PROPERTY_USAGE_BYTES = "usage_bytes";
  @javax.annotation.Nonnull
  private Integer usageBytes;

  public static final String JSON_PROPERTY_NUM_SESSIONS = "num_sessions";
  @javax.annotation.Nullable
  private Integer numSessions;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nullable
  private CostsResultAmount amount;

  public static final String JSON_PROPERTY_LINE_ITEM = "line_item";
  @javax.annotation.Nullable
  private JsonNullable<String> lineItem = JsonNullable.<String>undefined();

  public UsageTimeBucketResultInner() {
  }

  public UsageTimeBucketResultInner _object(@javax.annotation.Nonnull ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectEnum getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObject(@javax.annotation.Nonnull ObjectEnum _object) {
    this._object = _object;
  }

  public UsageTimeBucketResultInner inputTokens(@javax.annotation.Nonnull Integer inputTokens) {
    
    this.inputTokens = inputTokens;
    return this;
  }

  /**
   * The aggregated number of input tokens used.
   * @return inputTokens
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInputTokens() {
    return inputTokens;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputTokens(@javax.annotation.Nonnull Integer inputTokens) {
    this.inputTokens = inputTokens;
  }

  public UsageTimeBucketResultInner inputCachedTokens(@javax.annotation.Nullable Integer inputCachedTokens) {
    
    this.inputCachedTokens = inputCachedTokens;
    return this;
  }

  /**
   * The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
   * @return inputCachedTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_CACHED_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInputCachedTokens() {
    return inputCachedTokens;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_CACHED_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputCachedTokens(@javax.annotation.Nullable Integer inputCachedTokens) {
    this.inputCachedTokens = inputCachedTokens;
  }

  public UsageTimeBucketResultInner outputTokens(@javax.annotation.Nonnull Integer outputTokens) {
    
    this.outputTokens = outputTokens;
    return this;
  }

  /**
   * The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
   * @return outputTokens
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getOutputTokens() {
    return outputTokens;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputTokens(@javax.annotation.Nonnull Integer outputTokens) {
    this.outputTokens = outputTokens;
  }

  public UsageTimeBucketResultInner inputAudioTokens(@javax.annotation.Nullable Integer inputAudioTokens) {
    
    this.inputAudioTokens = inputAudioTokens;
    return this;
  }

  /**
   * The aggregated number of audio input tokens used, including cached tokens.
   * @return inputAudioTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInputAudioTokens() {
    return inputAudioTokens;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_AUDIO_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputAudioTokens(@javax.annotation.Nullable Integer inputAudioTokens) {
    this.inputAudioTokens = inputAudioTokens;
  }

  public UsageTimeBucketResultInner outputAudioTokens(@javax.annotation.Nullable Integer outputAudioTokens) {
    
    this.outputAudioTokens = outputAudioTokens;
    return this;
  }

  /**
   * The aggregated number of audio output tokens used.
   * @return outputAudioTokens
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_AUDIO_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOutputAudioTokens() {
    return outputAudioTokens;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_AUDIO_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputAudioTokens(@javax.annotation.Nullable Integer outputAudioTokens) {
    this.outputAudioTokens = outputAudioTokens;
  }

  public UsageTimeBucketResultInner numModelRequests(@javax.annotation.Nonnull Integer numModelRequests) {
    
    this.numModelRequests = numModelRequests;
    return this;
  }

  /**
   * The count of requests made to the model.
   * @return numModelRequests
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUM_MODEL_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumModelRequests() {
    return numModelRequests;
  }


  @JsonProperty(JSON_PROPERTY_NUM_MODEL_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumModelRequests(@javax.annotation.Nonnull Integer numModelRequests) {
    this.numModelRequests = numModelRequests;
  }

  public UsageTimeBucketResultInner projectId(@javax.annotation.Nullable String projectId) {
    this.projectId = JsonNullable.<String>of(projectId);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;project_id&#x60;, this field provides the project ID of the grouped costs result.
   * @return projectId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getProjectId() {
        return projectId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getProjectId_JsonNullable() {
    return projectId;
  }
  
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  public void setProjectId_JsonNullable(JsonNullable<String> projectId) {
    this.projectId = projectId;
  }

  public void setProjectId(@javax.annotation.Nullable String projectId) {
    this.projectId = JsonNullable.<String>of(projectId);
  }

  public UsageTimeBucketResultInner userId(@javax.annotation.Nullable String userId) {
    this.userId = JsonNullable.<String>of(userId);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;user_id&#x60;, this field provides the user ID of the grouped usage result.
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getUserId() {
        return userId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUserId_JsonNullable() {
    return userId;
  }
  
  @JsonProperty(JSON_PROPERTY_USER_ID)
  public void setUserId_JsonNullable(JsonNullable<String> userId) {
    this.userId = userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = JsonNullable.<String>of(userId);
  }

  public UsageTimeBucketResultInner apiKeyId(@javax.annotation.Nullable String apiKeyId) {
    this.apiKeyId = JsonNullable.<String>of(apiKeyId);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;api_key_id&#x60;, this field provides the API key ID of the grouped usage result.
   * @return apiKeyId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getApiKeyId() {
        return apiKeyId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_API_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getApiKeyId_JsonNullable() {
    return apiKeyId;
  }
  
  @JsonProperty(JSON_PROPERTY_API_KEY_ID)
  public void setApiKeyId_JsonNullable(JsonNullable<String> apiKeyId) {
    this.apiKeyId = apiKeyId;
  }

  public void setApiKeyId(@javax.annotation.Nullable String apiKeyId) {
    this.apiKeyId = JsonNullable.<String>of(apiKeyId);
  }

  public UsageTimeBucketResultInner model(@javax.annotation.Nullable String model) {
    this.model = JsonNullable.<String>of(model);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;model&#x60;, this field provides the model name of the grouped usage result.
   * @return model
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getModel() {
        return model.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getModel_JsonNullable() {
    return model;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL)
  public void setModel_JsonNullable(JsonNullable<String> model) {
    this.model = model;
  }

  public void setModel(@javax.annotation.Nullable String model) {
    this.model = JsonNullable.<String>of(model);
  }

  public UsageTimeBucketResultInner batch(@javax.annotation.Nullable Boolean batch) {
    this.batch = JsonNullable.<Boolean>of(batch);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;batch&#x60;, this field tells whether the grouped usage result is batch or not.
   * @return batch
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getBatch() {
        return batch.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getBatch_JsonNullable() {
    return batch;
  }
  
  @JsonProperty(JSON_PROPERTY_BATCH)
  public void setBatch_JsonNullable(JsonNullable<Boolean> batch) {
    this.batch = batch;
  }

  public void setBatch(@javax.annotation.Nullable Boolean batch) {
    this.batch = JsonNullable.<Boolean>of(batch);
  }

  public UsageTimeBucketResultInner images(@javax.annotation.Nonnull Integer images) {
    
    this.images = images;
    return this;
  }

  /**
   * The number of images processed.
   * @return images
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImages(@javax.annotation.Nonnull Integer images) {
    this.images = images;
  }

  public UsageTimeBucketResultInner source(@javax.annotation.Nullable String source) {
    this.source = JsonNullable.<String>of(source);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;source&#x60;, this field provides the source of the grouped usage result, possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60;.
   * @return source
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSource() {
        return source.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSource_JsonNullable() {
    return source;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE)
  public void setSource_JsonNullable(JsonNullable<String> source) {
    this.source = source;
  }

  public void setSource(@javax.annotation.Nullable String source) {
    this.source = JsonNullable.<String>of(source);
  }

  public UsageTimeBucketResultInner size(@javax.annotation.Nullable String size) {
    this.size = JsonNullable.<String>of(size);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;size&#x60;, this field provides the image size of the grouped usage result.
   * @return size
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSize() {
        return size.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSize_JsonNullable() {
    return size;
  }
  
  @JsonProperty(JSON_PROPERTY_SIZE)
  public void setSize_JsonNullable(JsonNullable<String> size) {
    this.size = size;
  }

  public void setSize(@javax.annotation.Nullable String size) {
    this.size = JsonNullable.<String>of(size);
  }

  public UsageTimeBucketResultInner characters(@javax.annotation.Nonnull Integer characters) {
    
    this.characters = characters;
    return this;
  }

  /**
   * The number of characters processed.
   * @return characters
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCharacters() {
    return characters;
  }


  @JsonProperty(JSON_PROPERTY_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCharacters(@javax.annotation.Nonnull Integer characters) {
    this.characters = characters;
  }

  public UsageTimeBucketResultInner seconds(@javax.annotation.Nonnull Integer seconds) {
    
    this.seconds = seconds;
    return this;
  }

  /**
   * The number of seconds processed.
   * @return seconds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSeconds() {
    return seconds;
  }


  @JsonProperty(JSON_PROPERTY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeconds(@javax.annotation.Nonnull Integer seconds) {
    this.seconds = seconds;
  }

  public UsageTimeBucketResultInner usageBytes(@javax.annotation.Nonnull Integer usageBytes) {
    
    this.usageBytes = usageBytes;
    return this;
  }

  /**
   * The vector stores usage in bytes.
   * @return usageBytes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USAGE_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUsageBytes() {
    return usageBytes;
  }


  @JsonProperty(JSON_PROPERTY_USAGE_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsageBytes(@javax.annotation.Nonnull Integer usageBytes) {
    this.usageBytes = usageBytes;
  }

  public UsageTimeBucketResultInner numSessions(@javax.annotation.Nullable Integer numSessions) {
    
    this.numSessions = numSessions;
    return this;
  }

  /**
   * The number of code interpreter sessions.
   * @return numSessions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumSessions() {
    return numSessions;
  }


  @JsonProperty(JSON_PROPERTY_NUM_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumSessions(@javax.annotation.Nullable Integer numSessions) {
    this.numSessions = numSessions;
  }

  public UsageTimeBucketResultInner amount(@javax.annotation.Nullable CostsResultAmount amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CostsResultAmount getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@javax.annotation.Nullable CostsResultAmount amount) {
    this.amount = amount;
  }

  public UsageTimeBucketResultInner lineItem(@javax.annotation.Nullable String lineItem) {
    this.lineItem = JsonNullable.<String>of(lineItem);
    
    return this;
  }

  /**
   * When &#x60;group_by&#x3D;line_item&#x60;, this field provides the line item of the grouped costs result.
   * @return lineItem
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getLineItem() {
        return lineItem.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LINE_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLineItem_JsonNullable() {
    return lineItem;
  }
  
  @JsonProperty(JSON_PROPERTY_LINE_ITEM)
  public void setLineItem_JsonNullable(JsonNullable<String> lineItem) {
    this.lineItem = lineItem;
  }

  public void setLineItem(@javax.annotation.Nullable String lineItem) {
    this.lineItem = JsonNullable.<String>of(lineItem);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageTimeBucketResultInner usageTimeBucketResultInner = (UsageTimeBucketResultInner) o;
    return Objects.equals(this._object, usageTimeBucketResultInner._object) &&
        Objects.equals(this.inputTokens, usageTimeBucketResultInner.inputTokens) &&
        Objects.equals(this.inputCachedTokens, usageTimeBucketResultInner.inputCachedTokens) &&
        Objects.equals(this.outputTokens, usageTimeBucketResultInner.outputTokens) &&
        Objects.equals(this.inputAudioTokens, usageTimeBucketResultInner.inputAudioTokens) &&
        Objects.equals(this.outputAudioTokens, usageTimeBucketResultInner.outputAudioTokens) &&
        Objects.equals(this.numModelRequests, usageTimeBucketResultInner.numModelRequests) &&
        equalsNullable(this.projectId, usageTimeBucketResultInner.projectId) &&
        equalsNullable(this.userId, usageTimeBucketResultInner.userId) &&
        equalsNullable(this.apiKeyId, usageTimeBucketResultInner.apiKeyId) &&
        equalsNullable(this.model, usageTimeBucketResultInner.model) &&
        equalsNullable(this.batch, usageTimeBucketResultInner.batch) &&
        Objects.equals(this.images, usageTimeBucketResultInner.images) &&
        equalsNullable(this.source, usageTimeBucketResultInner.source) &&
        equalsNullable(this.size, usageTimeBucketResultInner.size) &&
        Objects.equals(this.characters, usageTimeBucketResultInner.characters) &&
        Objects.equals(this.seconds, usageTimeBucketResultInner.seconds) &&
        Objects.equals(this.usageBytes, usageTimeBucketResultInner.usageBytes) &&
        Objects.equals(this.numSessions, usageTimeBucketResultInner.numSessions) &&
        Objects.equals(this.amount, usageTimeBucketResultInner.amount) &&
        equalsNullable(this.lineItem, usageTimeBucketResultInner.lineItem);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, inputTokens, inputCachedTokens, outputTokens, inputAudioTokens, outputAudioTokens, numModelRequests, hashCodeNullable(projectId), hashCodeNullable(userId), hashCodeNullable(apiKeyId), hashCodeNullable(model), hashCodeNullable(batch), images, hashCodeNullable(source), hashCodeNullable(size), characters, seconds, usageBytes, numSessions, amount, hashCodeNullable(lineItem));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageTimeBucketResultInner {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    inputTokens: ").append(toIndentedString(inputTokens)).append("\n");
    sb.append("    inputCachedTokens: ").append(toIndentedString(inputCachedTokens)).append("\n");
    sb.append("    outputTokens: ").append(toIndentedString(outputTokens)).append("\n");
    sb.append("    inputAudioTokens: ").append(toIndentedString(inputAudioTokens)).append("\n");
    sb.append("    outputAudioTokens: ").append(toIndentedString(outputAudioTokens)).append("\n");
    sb.append("    numModelRequests: ").append(toIndentedString(numModelRequests)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    apiKeyId: ").append(toIndentedString(apiKeyId)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    batch: ").append(toIndentedString(batch)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    usageBytes: ").append(toIndentedString(usageBytes)).append("\n");
    sb.append("    numSessions: ").append(toIndentedString(numSessions)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    lineItem: ").append(toIndentedString(lineItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `object` to the URL query string
    if (getObject() != null) {
      try {
        joiner.add(String.format("%sobject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getObject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_tokens` to the URL query string
    if (getInputTokens() != null) {
      try {
        joiner.add(String.format("%sinput_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_cached_tokens` to the URL query string
    if (getInputCachedTokens() != null) {
      try {
        joiner.add(String.format("%sinput_cached_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputCachedTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output_tokens` to the URL query string
    if (getOutputTokens() != null) {
      try {
        joiner.add(String.format("%soutput_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `input_audio_tokens` to the URL query string
    if (getInputAudioTokens() != null) {
      try {
        joiner.add(String.format("%sinput_audio_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputAudioTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output_audio_tokens` to the URL query string
    if (getOutputAudioTokens() != null) {
      try {
        joiner.add(String.format("%soutput_audio_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputAudioTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `num_model_requests` to the URL query string
    if (getNumModelRequests() != null) {
      try {
        joiner.add(String.format("%snum_model_requests%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumModelRequests()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `project_id` to the URL query string
    if (getProjectId() != null) {
      try {
        joiner.add(String.format("%sproject_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProjectId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `user_id` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suser_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `api_key_id` to the URL query string
    if (getApiKeyId() != null) {
      try {
        joiner.add(String.format("%sapi_key_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getApiKeyId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      try {
        joiner.add(String.format("%smodel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `batch` to the URL query string
    if (getBatch() != null) {
      try {
        joiner.add(String.format("%sbatch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBatch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `images` to the URL query string
    if (getImages() != null) {
      try {
        joiner.add(String.format("%simages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImages()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `source` to the URL query string
    if (getSource() != null) {
      try {
        joiner.add(String.format("%ssource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `size` to the URL query string
    if (getSize() != null) {
      try {
        joiner.add(String.format("%ssize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `characters` to the URL query string
    if (getCharacters() != null) {
      try {
        joiner.add(String.format("%scharacters%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCharacters()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seconds` to the URL query string
    if (getSeconds() != null) {
      try {
        joiner.add(String.format("%sseconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeconds()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `usage_bytes` to the URL query string
    if (getUsageBytes() != null) {
      try {
        joiner.add(String.format("%susage_bytes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsageBytes()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `num_sessions` to the URL query string
    if (getNumSessions() != null) {
      try {
        joiner.add(String.format("%snum_sessions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumSessions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
    }

    // add `line_item` to the URL query string
    if (getLineItem() != null) {
      try {
        joiner.add(String.format("%sline_item%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLineItem()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

