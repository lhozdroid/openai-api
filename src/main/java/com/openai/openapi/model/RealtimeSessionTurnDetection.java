/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Configuration for turn detection. Can be set to &#x60;null&#x60; to turn off. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech. 
 */
@JsonPropertyOrder({
  RealtimeSessionTurnDetection.JSON_PROPERTY_TYPE,
  RealtimeSessionTurnDetection.JSON_PROPERTY_THRESHOLD,
  RealtimeSessionTurnDetection.JSON_PROPERTY_PREFIX_PADDING_MS,
  RealtimeSessionTurnDetection.JSON_PROPERTY_SILENCE_DURATION_MS
})
@JsonTypeName("RealtimeSession_turn_detection")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class RealtimeSessionTurnDetection {
  /**
   * Type of turn detection, only &#x60;server_vad&#x60; is currently supported. 
   */
  public enum TypeEnum {
    SERVER_VAD(String.valueOf("server_vad"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  @javax.annotation.Nullable
  private BigDecimal threshold;

  public static final String JSON_PROPERTY_PREFIX_PADDING_MS = "prefix_padding_ms";
  @javax.annotation.Nullable
  private Integer prefixPaddingMs;

  public static final String JSON_PROPERTY_SILENCE_DURATION_MS = "silence_duration_ms";
  @javax.annotation.Nullable
  private Integer silenceDurationMs;

  public RealtimeSessionTurnDetection() {
  }

  public RealtimeSessionTurnDetection type(@javax.annotation.Nullable TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Type of turn detection, only &#x60;server_vad&#x60; is currently supported. 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }

  public RealtimeSessionTurnDetection threshold(@javax.annotation.Nullable BigDecimal threshold) {
    
    this.threshold = threshold;
    return this;
  }

  /**
   * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher threshold will require louder audio to activate the model, and thus might perform better in noisy environments. 
   * @return threshold
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreshold(@javax.annotation.Nullable BigDecimal threshold) {
    this.threshold = threshold;
  }

  public RealtimeSessionTurnDetection prefixPaddingMs(@javax.annotation.Nullable Integer prefixPaddingMs) {
    
    this.prefixPaddingMs = prefixPaddingMs;
    return this;
  }

  /**
   * Amount of audio to include before the VAD detected speech (in milliseconds). Defaults to 300ms. 
   * @return prefixPaddingMs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFIX_PADDING_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPrefixPaddingMs() {
    return prefixPaddingMs;
  }


  @JsonProperty(JSON_PROPERTY_PREFIX_PADDING_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefixPaddingMs(@javax.annotation.Nullable Integer prefixPaddingMs) {
    this.prefixPaddingMs = prefixPaddingMs;
  }

  public RealtimeSessionTurnDetection silenceDurationMs(@javax.annotation.Nullable Integer silenceDurationMs) {
    
    this.silenceDurationMs = silenceDurationMs;
    return this;
  }

  /**
   * Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms. With shorter values the model will respond more quickly, but may jump in on short pauses from the user. 
   * @return silenceDurationMs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SILENCE_DURATION_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSilenceDurationMs() {
    return silenceDurationMs;
  }


  @JsonProperty(JSON_PROPERTY_SILENCE_DURATION_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSilenceDurationMs(@javax.annotation.Nullable Integer silenceDurationMs) {
    this.silenceDurationMs = silenceDurationMs;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeSessionTurnDetection realtimeSessionTurnDetection = (RealtimeSessionTurnDetection) o;
    return Objects.equals(this.type, realtimeSessionTurnDetection.type) &&
        Objects.equals(this.threshold, realtimeSessionTurnDetection.threshold) &&
        Objects.equals(this.prefixPaddingMs, realtimeSessionTurnDetection.prefixPaddingMs) &&
        Objects.equals(this.silenceDurationMs, realtimeSessionTurnDetection.silenceDurationMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, threshold, prefixPaddingMs, silenceDurationMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeSessionTurnDetection {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    prefixPaddingMs: ").append(toIndentedString(prefixPaddingMs)).append("\n");
    sb.append("    silenceDurationMs: ").append(toIndentedString(silenceDurationMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `threshold` to the URL query string
    if (getThreshold() != null) {
      try {
        joiner.add(String.format("%sthreshold%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreshold()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prefix_padding_ms` to the URL query string
    if (getPrefixPaddingMs() != null) {
      try {
        joiner.add(String.format("%sprefix_padding_ms%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrefixPaddingMs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `silence_duration_ms` to the URL query string
    if (getSilenceDurationMs() != null) {
      try {
        joiner.add(String.format("%ssilence_duration_ms%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSilenceDurationMs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

