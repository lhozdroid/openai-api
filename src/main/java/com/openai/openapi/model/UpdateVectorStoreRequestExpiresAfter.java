/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UpdateVectorStoreRequestExpiresAfter
 */
@JsonPropertyOrder({
  UpdateVectorStoreRequestExpiresAfter.JSON_PROPERTY_ANCHOR,
  UpdateVectorStoreRequestExpiresAfter.JSON_PROPERTY_DAYS
})
@JsonTypeName("UpdateVectorStoreRequest_expires_after")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class UpdateVectorStoreRequestExpiresAfter {
  /**
   * Anchor timestamp after which the expiration policy applies. Supported anchors: &#x60;last_active_at&#x60;.
   */
  public enum AnchorEnum {
    LAST_ACTIVE_AT(String.valueOf("last_active_at"));

    private String value;

    AnchorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AnchorEnum fromValue(String value) {
      for (AnchorEnum b : AnchorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ANCHOR = "anchor";
  @javax.annotation.Nonnull
  private AnchorEnum anchor;

  public static final String JSON_PROPERTY_DAYS = "days";
  @javax.annotation.Nonnull
  private Integer days;

  public UpdateVectorStoreRequestExpiresAfter() {
  }

  public UpdateVectorStoreRequestExpiresAfter anchor(@javax.annotation.Nonnull AnchorEnum anchor) {
    
    this.anchor = anchor;
    return this;
  }

  /**
   * Anchor timestamp after which the expiration policy applies. Supported anchors: &#x60;last_active_at&#x60;.
   * @return anchor
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AnchorEnum getAnchor() {
    return anchor;
  }


  @JsonProperty(JSON_PROPERTY_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAnchor(@javax.annotation.Nonnull AnchorEnum anchor) {
    this.anchor = anchor;
  }

  public UpdateVectorStoreRequestExpiresAfter days(@javax.annotation.Nonnull Integer days) {
    
    this.days = days;
    return this;
  }

  /**
   * The number of days after the anchor time that the vector store will expire.
   * minimum: 1
   * maximum: 365
   * @return days
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDays() {
    return days;
  }


  @JsonProperty(JSON_PROPERTY_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDays(@javax.annotation.Nonnull Integer days) {
    this.days = days;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateVectorStoreRequestExpiresAfter updateVectorStoreRequestExpiresAfter = (UpdateVectorStoreRequestExpiresAfter) o;
    return Objects.equals(this.anchor, updateVectorStoreRequestExpiresAfter.anchor) &&
        Objects.equals(this.days, updateVectorStoreRequestExpiresAfter.days);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchor, days);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateVectorStoreRequestExpiresAfter {\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `anchor` to the URL query string
    if (getAnchor() != null) {
      try {
        joiner.add(String.format("%sanchor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAnchor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `days` to the URL query string
    if (getDays() != null) {
      try {
        joiner.add(String.format("%sdays%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDays()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

