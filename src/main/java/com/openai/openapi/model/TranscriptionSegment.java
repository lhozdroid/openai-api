/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TranscriptionSegment
 */
@JsonPropertyOrder({
  TranscriptionSegment.JSON_PROPERTY_ID,
  TranscriptionSegment.JSON_PROPERTY_SEEK,
  TranscriptionSegment.JSON_PROPERTY_START,
  TranscriptionSegment.JSON_PROPERTY_END,
  TranscriptionSegment.JSON_PROPERTY_TEXT,
  TranscriptionSegment.JSON_PROPERTY_TOKENS,
  TranscriptionSegment.JSON_PROPERTY_TEMPERATURE,
  TranscriptionSegment.JSON_PROPERTY_AVG_LOGPROB,
  TranscriptionSegment.JSON_PROPERTY_COMPRESSION_RATIO,
  TranscriptionSegment.JSON_PROPERTY_NO_SPEECH_PROB
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class TranscriptionSegment {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private Integer id;

  public static final String JSON_PROPERTY_SEEK = "seek";
  @javax.annotation.Nonnull
  private Integer seek;

  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nonnull
  private Float start;

  public static final String JSON_PROPERTY_END = "end";
  @javax.annotation.Nonnull
  private Float end;

  public static final String JSON_PROPERTY_TEXT = "text";
  @javax.annotation.Nonnull
  private String text;

  public static final String JSON_PROPERTY_TOKENS = "tokens";
  @javax.annotation.Nonnull
  private List<Integer> tokens = new ArrayList<>();

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @javax.annotation.Nonnull
  private Float temperature;

  public static final String JSON_PROPERTY_AVG_LOGPROB = "avg_logprob";
  @javax.annotation.Nonnull
  private Float avgLogprob;

  public static final String JSON_PROPERTY_COMPRESSION_RATIO = "compression_ratio";
  @javax.annotation.Nonnull
  private Float compressionRatio;

  public static final String JSON_PROPERTY_NO_SPEECH_PROB = "no_speech_prob";
  @javax.annotation.Nonnull
  private Float noSpeechProb;

  public TranscriptionSegment() {
  }

  public TranscriptionSegment id(@javax.annotation.Nonnull Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the segment.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull Integer id) {
    this.id = id;
  }

  public TranscriptionSegment seek(@javax.annotation.Nonnull Integer seek) {
    
    this.seek = seek;
    return this;
  }

  /**
   * Seek offset of the segment.
   * @return seek
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEEK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSeek() {
    return seek;
  }


  @JsonProperty(JSON_PROPERTY_SEEK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeek(@javax.annotation.Nonnull Integer seek) {
    this.seek = seek;
  }

  public TranscriptionSegment start(@javax.annotation.Nonnull Float start) {
    
    this.start = start;
    return this;
  }

  /**
   * Start time of the segment in seconds.
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(@javax.annotation.Nonnull Float start) {
    this.start = start;
  }

  public TranscriptionSegment end(@javax.annotation.Nonnull Float end) {
    
    this.end = end;
    return this;
  }

  /**
   * End time of the segment in seconds.
   * @return end
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnd(@javax.annotation.Nonnull Float end) {
    this.end = end;
  }

  public TranscriptionSegment text(@javax.annotation.Nonnull String text) {
    
    this.text = text;
    return this;
  }

  /**
   * Text content of the segment.
   * @return text
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(@javax.annotation.Nonnull String text) {
    this.text = text;
  }

  public TranscriptionSegment tokens(@javax.annotation.Nonnull List<Integer> tokens) {
    
    this.tokens = tokens;
    return this;
  }

  public TranscriptionSegment addTokensItem(Integer tokensItem) {
    if (this.tokens == null) {
      this.tokens = new ArrayList<>();
    }
    this.tokens.add(tokensItem);
    return this;
  }

  /**
   * Array of token IDs for the text content.
   * @return tokens
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Integer> getTokens() {
    return tokens;
  }


  @JsonProperty(JSON_PROPERTY_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokens(@javax.annotation.Nonnull List<Integer> tokens) {
    this.tokens = tokens;
  }

  public TranscriptionSegment temperature(@javax.annotation.Nonnull Float temperature) {
    
    this.temperature = temperature;
    return this;
  }

  /**
   * Temperature parameter used for generating the segment.
   * @return temperature
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getTemperature() {
    return temperature;
  }


  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemperature(@javax.annotation.Nonnull Float temperature) {
    this.temperature = temperature;
  }

  public TranscriptionSegment avgLogprob(@javax.annotation.Nonnull Float avgLogprob) {
    
    this.avgLogprob = avgLogprob;
    return this;
  }

  /**
   * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
   * @return avgLogprob
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVG_LOGPROB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getAvgLogprob() {
    return avgLogprob;
  }


  @JsonProperty(JSON_PROPERTY_AVG_LOGPROB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvgLogprob(@javax.annotation.Nonnull Float avgLogprob) {
    this.avgLogprob = avgLogprob;
  }

  public TranscriptionSegment compressionRatio(@javax.annotation.Nonnull Float compressionRatio) {
    
    this.compressionRatio = compressionRatio;
    return this;
  }

  /**
   * Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
   * @return compressionRatio
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPRESSION_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getCompressionRatio() {
    return compressionRatio;
  }


  @JsonProperty(JSON_PROPERTY_COMPRESSION_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompressionRatio(@javax.annotation.Nonnull Float compressionRatio) {
    this.compressionRatio = compressionRatio;
  }

  public TranscriptionSegment noSpeechProb(@javax.annotation.Nonnull Float noSpeechProb) {
    
    this.noSpeechProb = noSpeechProb;
    return this;
  }

  /**
   * Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
   * @return noSpeechProb
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NO_SPEECH_PROB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getNoSpeechProb() {
    return noSpeechProb;
  }


  @JsonProperty(JSON_PROPERTY_NO_SPEECH_PROB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNoSpeechProb(@javax.annotation.Nonnull Float noSpeechProb) {
    this.noSpeechProb = noSpeechProb;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscriptionSegment transcriptionSegment = (TranscriptionSegment) o;
    return Objects.equals(this.id, transcriptionSegment.id) &&
        Objects.equals(this.seek, transcriptionSegment.seek) &&
        Objects.equals(this.start, transcriptionSegment.start) &&
        Objects.equals(this.end, transcriptionSegment.end) &&
        Objects.equals(this.text, transcriptionSegment.text) &&
        Objects.equals(this.tokens, transcriptionSegment.tokens) &&
        Objects.equals(this.temperature, transcriptionSegment.temperature) &&
        Objects.equals(this.avgLogprob, transcriptionSegment.avgLogprob) &&
        Objects.equals(this.compressionRatio, transcriptionSegment.compressionRatio) &&
        Objects.equals(this.noSpeechProb, transcriptionSegment.noSpeechProb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, seek, start, end, text, tokens, temperature, avgLogprob, compressionRatio, noSpeechProb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscriptionSegment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    seek: ").append(toIndentedString(seek)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    avgLogprob: ").append(toIndentedString(avgLogprob)).append("\n");
    sb.append("    compressionRatio: ").append(toIndentedString(compressionRatio)).append("\n");
    sb.append("    noSpeechProb: ").append(toIndentedString(noSpeechProb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seek` to the URL query string
    if (getSeek() != null) {
      try {
        joiner.add(String.format("%sseek%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeek()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `start` to the URL query string
    if (getStart() != null) {
      try {
        joiner.add(String.format("%sstart%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStart()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `end` to the URL query string
    if (getEnd() != null) {
      try {
        joiner.add(String.format("%send%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `text` to the URL query string
    if (getText() != null) {
      try {
        joiner.add(String.format("%stext%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getText()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tokens` to the URL query string
    if (getTokens() != null) {
      for (int i = 0; i < getTokens().size(); i++) {
        try {
          joiner.add(String.format("%stokens%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getTokens().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `avg_logprob` to the URL query string
    if (getAvgLogprob() != null) {
      try {
        joiner.add(String.format("%savg_logprob%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAvgLogprob()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `compression_ratio` to the URL query string
    if (getCompressionRatio() != null) {
      try {
        joiner.add(String.format("%scompression_ratio%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCompressionRatio()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `no_speech_prob` to the URL query string
    if (getNoSpeechProb() != null) {
      try {
        joiner.add(String.format("%sno_speech_prob%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoSpeechProb()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

