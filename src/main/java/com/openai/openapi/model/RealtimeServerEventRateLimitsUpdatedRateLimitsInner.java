/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * RealtimeServerEventRateLimitsUpdatedRateLimitsInner
 */
@JsonPropertyOrder({
  RealtimeServerEventRateLimitsUpdatedRateLimitsInner.JSON_PROPERTY_NAME,
  RealtimeServerEventRateLimitsUpdatedRateLimitsInner.JSON_PROPERTY_LIMIT,
  RealtimeServerEventRateLimitsUpdatedRateLimitsInner.JSON_PROPERTY_REMAINING,
  RealtimeServerEventRateLimitsUpdatedRateLimitsInner.JSON_PROPERTY_RESET_SECONDS
})
@JsonTypeName("RealtimeServerEventRateLimitsUpdated_rate_limits_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
  /**
   * The name of the rate limit (&#x60;requests&#x60;, &#x60;tokens&#x60;). 
   */
  public enum NameEnum {
    REQUESTS(String.valueOf("requests")),
    
    TOKENS(String.valueOf("tokens"));

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private NameEnum name;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  @javax.annotation.Nullable
  private Integer limit;

  public static final String JSON_PROPERTY_REMAINING = "remaining";
  @javax.annotation.Nullable
  private Integer remaining;

  public static final String JSON_PROPERTY_RESET_SECONDS = "reset_seconds";
  @javax.annotation.Nullable
  private BigDecimal resetSeconds;

  public RealtimeServerEventRateLimitsUpdatedRateLimitsInner() {
  }

  public RealtimeServerEventRateLimitsUpdatedRateLimitsInner name(@javax.annotation.Nullable NameEnum name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the rate limit (&#x60;requests&#x60;, &#x60;tokens&#x60;). 
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NameEnum getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable NameEnum name) {
    this.name = name;
  }

  public RealtimeServerEventRateLimitsUpdatedRateLimitsInner limit(@javax.annotation.Nullable Integer limit) {
    
    this.limit = limit;
    return this;
  }

  /**
   * The maximum allowed value for the rate limit.
   * @return limit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }

  public RealtimeServerEventRateLimitsUpdatedRateLimitsInner remaining(@javax.annotation.Nullable Integer remaining) {
    
    this.remaining = remaining;
    return this;
  }

  /**
   * The remaining value before the limit is reached.
   * @return remaining
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRemaining() {
    return remaining;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemaining(@javax.annotation.Nullable Integer remaining) {
    this.remaining = remaining;
  }

  public RealtimeServerEventRateLimitsUpdatedRateLimitsInner resetSeconds(@javax.annotation.Nullable BigDecimal resetSeconds) {
    
    this.resetSeconds = resetSeconds;
    return this;
  }

  /**
   * Seconds until the rate limit resets.
   * @return resetSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESET_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getResetSeconds() {
    return resetSeconds;
  }


  @JsonProperty(JSON_PROPERTY_RESET_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResetSeconds(@javax.annotation.Nullable BigDecimal resetSeconds) {
    this.resetSeconds = resetSeconds;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeServerEventRateLimitsUpdatedRateLimitsInner realtimeServerEventRateLimitsUpdatedRateLimitsInner = (RealtimeServerEventRateLimitsUpdatedRateLimitsInner) o;
    return Objects.equals(this.name, realtimeServerEventRateLimitsUpdatedRateLimitsInner.name) &&
        Objects.equals(this.limit, realtimeServerEventRateLimitsUpdatedRateLimitsInner.limit) &&
        Objects.equals(this.remaining, realtimeServerEventRateLimitsUpdatedRateLimitsInner.remaining) &&
        Objects.equals(this.resetSeconds, realtimeServerEventRateLimitsUpdatedRateLimitsInner.resetSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, limit, remaining, resetSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeServerEventRateLimitsUpdatedRateLimitsInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    resetSeconds: ").append(toIndentedString(resetSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `limit` to the URL query string
    if (getLimit() != null) {
      try {
        joiner.add(String.format("%slimit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLimit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `remaining` to the URL query string
    if (getRemaining() != null) {
      try {
        joiner.add(String.format("%sremaining%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRemaining()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reset_seconds` to the URL query string
    if (getResetSeconds() != null) {
      try {
        joiner.add(String.format("%sreset_seconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResetSeconds()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

