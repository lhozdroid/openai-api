/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openai.openapi.model.AssistantObjectResponseFormat;
import com.openai.openapi.model.AssistantObjectToolsInner;
import com.openai.openapi.model.CreateMessageRequest;
import com.openai.openapi.model.CreateRunRequestModel;
import com.openai.openapi.model.CreateRunRequestToolChoice;
import com.openai.openapi.model.CreateRunRequestTruncationStrategy;
import com.openai.openapi.model.ReasoningEffort;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateRunRequest
 */
@JsonPropertyOrder({
  CreateRunRequest.JSON_PROPERTY_ASSISTANT_ID,
  CreateRunRequest.JSON_PROPERTY_MODEL,
  CreateRunRequest.JSON_PROPERTY_REASONING_EFFORT,
  CreateRunRequest.JSON_PROPERTY_INSTRUCTIONS,
  CreateRunRequest.JSON_PROPERTY_ADDITIONAL_INSTRUCTIONS,
  CreateRunRequest.JSON_PROPERTY_ADDITIONAL_MESSAGES,
  CreateRunRequest.JSON_PROPERTY_TOOLS,
  CreateRunRequest.JSON_PROPERTY_METADATA,
  CreateRunRequest.JSON_PROPERTY_TEMPERATURE,
  CreateRunRequest.JSON_PROPERTY_TOP_P,
  CreateRunRequest.JSON_PROPERTY_STREAM,
  CreateRunRequest.JSON_PROPERTY_MAX_PROMPT_TOKENS,
  CreateRunRequest.JSON_PROPERTY_MAX_COMPLETION_TOKENS,
  CreateRunRequest.JSON_PROPERTY_TRUNCATION_STRATEGY,
  CreateRunRequest.JSON_PROPERTY_TOOL_CHOICE,
  CreateRunRequest.JSON_PROPERTY_PARALLEL_TOOL_CALLS,
  CreateRunRequest.JSON_PROPERTY_RESPONSE_FORMAT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class CreateRunRequest {
  public static final String JSON_PROPERTY_ASSISTANT_ID = "assistant_id";
  @javax.annotation.Nonnull
  private String assistantId;

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nullable
  private JsonNullable<CreateRunRequestModel> model = JsonNullable.<CreateRunRequestModel>undefined();

  public static final String JSON_PROPERTY_REASONING_EFFORT = "reasoning_effort";
  @javax.annotation.Nullable
  private JsonNullable<ReasoningEffort> reasoningEffort = JsonNullable.<ReasoningEffort>of(ReasoningEffort.MEDIUM);

  public static final String JSON_PROPERTY_INSTRUCTIONS = "instructions";
  @javax.annotation.Nullable
  private JsonNullable<String> instructions = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ADDITIONAL_INSTRUCTIONS = "additional_instructions";
  @javax.annotation.Nullable
  private JsonNullable<String> additionalInstructions = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ADDITIONAL_MESSAGES = "additional_messages";
  @javax.annotation.Nullable
  private JsonNullable<List<CreateMessageRequest>> additionalMessages = JsonNullable.<List<CreateMessageRequest>>undefined();

  public static final String JSON_PROPERTY_TOOLS = "tools";
  @javax.annotation.Nullable
  private JsonNullable<List<AssistantObjectToolsInner>> tools = JsonNullable.<List<AssistantObjectToolsInner>>undefined();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private JsonNullable<Map<String, String>> metadata = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  @javax.annotation.Nullable
  private JsonNullable<BigDecimal> topP = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_STREAM = "stream";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> stream = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_MAX_PROMPT_TOKENS = "max_prompt_tokens";
  @javax.annotation.Nullable
  private JsonNullable<Integer> maxPromptTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_COMPLETION_TOKENS = "max_completion_tokens";
  @javax.annotation.Nullable
  private JsonNullable<Integer> maxCompletionTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_TRUNCATION_STRATEGY = "truncation_strategy";
  @javax.annotation.Nullable
  private CreateRunRequestTruncationStrategy truncationStrategy;

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  @javax.annotation.Nullable
  private CreateRunRequestToolChoice toolChoice;

  public static final String JSON_PROPERTY_PARALLEL_TOOL_CALLS = "parallel_tool_calls";
  @javax.annotation.Nullable
  private Boolean parallelToolCalls = true;

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  @javax.annotation.Nullable
  private AssistantObjectResponseFormat responseFormat;

  public CreateRunRequest() {
  }

  public CreateRunRequest assistantId(@javax.annotation.Nonnull String assistantId) {
    
    this.assistantId = assistantId;
    return this;
  }

  /**
   * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
   * @return assistantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ASSISTANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAssistantId() {
    return assistantId;
  }


  @JsonProperty(JSON_PROPERTY_ASSISTANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssistantId(@javax.annotation.Nonnull String assistantId) {
    this.assistantId = assistantId;
  }

  public CreateRunRequest model(@javax.annotation.Nullable CreateRunRequestModel model) {
    this.model = JsonNullable.<CreateRunRequestModel>of(model);
    
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateRunRequestModel getModel() {
        return model.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateRunRequestModel> getModel_JsonNullable() {
    return model;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL)
  public void setModel_JsonNullable(JsonNullable<CreateRunRequestModel> model) {
    this.model = model;
  }

  public void setModel(@javax.annotation.Nullable CreateRunRequestModel model) {
    this.model = JsonNullable.<CreateRunRequestModel>of(model);
  }

  public CreateRunRequest reasoningEffort(@javax.annotation.Nullable ReasoningEffort reasoningEffort) {
    this.reasoningEffort = JsonNullable.<ReasoningEffort>of(reasoningEffort);
    
    return this;
  }

  /**
   * Get reasoningEffort
   * @return reasoningEffort
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public ReasoningEffort getReasoningEffort() {
        return reasoningEffort.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REASONING_EFFORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ReasoningEffort> getReasoningEffort_JsonNullable() {
    return reasoningEffort;
  }
  
  @JsonProperty(JSON_PROPERTY_REASONING_EFFORT)
  public void setReasoningEffort_JsonNullable(JsonNullable<ReasoningEffort> reasoningEffort) {
    this.reasoningEffort = reasoningEffort;
  }

  public void setReasoningEffort(@javax.annotation.Nullable ReasoningEffort reasoningEffort) {
    this.reasoningEffort = JsonNullable.<ReasoningEffort>of(reasoningEffort);
  }

  public CreateRunRequest instructions(@javax.annotation.Nullable String instructions) {
    this.instructions = JsonNullable.<String>of(instructions);
    
    return this;
  }

  /**
   * Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
   * @return instructions
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getInstructions() {
        return instructions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getInstructions_JsonNullable() {
    return instructions;
  }
  
  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  public void setInstructions_JsonNullable(JsonNullable<String> instructions) {
    this.instructions = instructions;
  }

  public void setInstructions(@javax.annotation.Nullable String instructions) {
    this.instructions = JsonNullable.<String>of(instructions);
  }

  public CreateRunRequest additionalInstructions(@javax.annotation.Nullable String additionalInstructions) {
    this.additionalInstructions = JsonNullable.<String>of(additionalInstructions);
    
    return this;
  }

  /**
   * Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
   * @return additionalInstructions
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getAdditionalInstructions() {
        return additionalInstructions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAdditionalInstructions_JsonNullable() {
    return additionalInstructions;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INSTRUCTIONS)
  public void setAdditionalInstructions_JsonNullable(JsonNullable<String> additionalInstructions) {
    this.additionalInstructions = additionalInstructions;
  }

  public void setAdditionalInstructions(@javax.annotation.Nullable String additionalInstructions) {
    this.additionalInstructions = JsonNullable.<String>of(additionalInstructions);
  }

  public CreateRunRequest additionalMessages(@javax.annotation.Nullable List<CreateMessageRequest> additionalMessages) {
    this.additionalMessages = JsonNullable.<List<CreateMessageRequest>>of(additionalMessages);
    
    return this;
  }

  public CreateRunRequest addAdditionalMessagesItem(CreateMessageRequest additionalMessagesItem) {
    if (this.additionalMessages == null || !this.additionalMessages.isPresent()) {
      this.additionalMessages = JsonNullable.<List<CreateMessageRequest>>of(new ArrayList<>());
    }
    try {
      this.additionalMessages.get().add(additionalMessagesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Adds additional messages to the thread before creating the run.
   * @return additionalMessages
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<CreateMessageRequest> getAdditionalMessages() {
        return additionalMessages.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<CreateMessageRequest>> getAdditionalMessages_JsonNullable() {
    return additionalMessages;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_MESSAGES)
  public void setAdditionalMessages_JsonNullable(JsonNullable<List<CreateMessageRequest>> additionalMessages) {
    this.additionalMessages = additionalMessages;
  }

  public void setAdditionalMessages(@javax.annotation.Nullable List<CreateMessageRequest> additionalMessages) {
    this.additionalMessages = JsonNullable.<List<CreateMessageRequest>>of(additionalMessages);
  }

  public CreateRunRequest tools(@javax.annotation.Nullable List<AssistantObjectToolsInner> tools) {
    this.tools = JsonNullable.<List<AssistantObjectToolsInner>>of(tools);
    
    return this;
  }

  public CreateRunRequest addToolsItem(AssistantObjectToolsInner toolsItem) {
    if (this.tools == null || !this.tools.isPresent()) {
      this.tools = JsonNullable.<List<AssistantObjectToolsInner>>of(new ArrayList<>());
    }
    try {
      this.tools.get().add(toolsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   * @return tools
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<AssistantObjectToolsInner> getTools() {
        return tools.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AssistantObjectToolsInner>> getTools_JsonNullable() {
    return tools;
  }
  
  @JsonProperty(JSON_PROPERTY_TOOLS)
  public void setTools_JsonNullable(JsonNullable<List<AssistantObjectToolsInner>> tools) {
    this.tools = tools;
  }

  public void setTools(@javax.annotation.Nullable List<AssistantObjectToolsInner> tools) {
    this.tools = JsonNullable.<List<AssistantObjectToolsInner>>of(tools);
  }

  public CreateRunRequest metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = JsonNullable.<Map<String, String>>of(metadata);
    
    return this;
  }

  public CreateRunRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null || !this.metadata.isPresent()) {
      this.metadata = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.metadata.get().put(key, metadataItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getMetadata() {
        return metadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getMetadata_JsonNullable() {
    return metadata;
  }
  
  @JsonProperty(JSON_PROPERTY_METADATA)
  public void setMetadata_JsonNullable(JsonNullable<Map<String, String>> metadata) {
    this.metadata = metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = JsonNullable.<Map<String, String>>of(metadata);
  }

  public CreateRunRequest temperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
   * minimum: 0
   * maximum: 2
   * @return temperature
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(@javax.annotation.Nullable BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }

  public CreateRunRequest topP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
    
    return this;
  }

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both. 
   * minimum: 0
   * maximum: 1
   * @return topP
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTopP() {
        return topP.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTopP_JsonNullable() {
    return topP;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_P)
  public void setTopP_JsonNullable(JsonNullable<BigDecimal> topP) {
    this.topP = topP;
  }

  public void setTopP(@javax.annotation.Nullable BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
  }

  public CreateRunRequest stream(@javax.annotation.Nullable Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
    
    return this;
  }

  /**
   * If &#x60;true&#x60;, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a &#x60;data: [DONE]&#x60; message. 
   * @return stream
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getStream() {
        return stream.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getStream_JsonNullable() {
    return stream;
  }
  
  @JsonProperty(JSON_PROPERTY_STREAM)
  public void setStream_JsonNullable(JsonNullable<Boolean> stream) {
    this.stream = stream;
  }

  public void setStream(@javax.annotation.Nullable Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
  }

  public CreateRunRequest maxPromptTokens(@javax.annotation.Nullable Integer maxPromptTokens) {
    this.maxPromptTokens = JsonNullable.<Integer>of(maxPromptTokens);
    
    return this;
  }

  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status &#x60;incomplete&#x60;. See &#x60;incomplete_details&#x60; for more info. 
   * minimum: 256
   * @return maxPromptTokens
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getMaxPromptTokens() {
        return maxPromptTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_PROMPT_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxPromptTokens_JsonNullable() {
    return maxPromptTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_PROMPT_TOKENS)
  public void setMaxPromptTokens_JsonNullable(JsonNullable<Integer> maxPromptTokens) {
    this.maxPromptTokens = maxPromptTokens;
  }

  public void setMaxPromptTokens(@javax.annotation.Nullable Integer maxPromptTokens) {
    this.maxPromptTokens = JsonNullable.<Integer>of(maxPromptTokens);
  }

  public CreateRunRequest maxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    this.maxCompletionTokens = JsonNullable.<Integer>of(maxCompletionTokens);
    
    return this;
  }

  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status &#x60;incomplete&#x60;. See &#x60;incomplete_details&#x60; for more info. 
   * minimum: 256
   * @return maxCompletionTokens
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getMaxCompletionTokens() {
        return maxCompletionTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxCompletionTokens_JsonNullable() {
    return maxCompletionTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_COMPLETION_TOKENS)
  public void setMaxCompletionTokens_JsonNullable(JsonNullable<Integer> maxCompletionTokens) {
    this.maxCompletionTokens = maxCompletionTokens;
  }

  public void setMaxCompletionTokens(@javax.annotation.Nullable Integer maxCompletionTokens) {
    this.maxCompletionTokens = JsonNullable.<Integer>of(maxCompletionTokens);
  }

  public CreateRunRequest truncationStrategy(@javax.annotation.Nullable CreateRunRequestTruncationStrategy truncationStrategy) {
    
    this.truncationStrategy = truncationStrategy;
    return this;
  }

  /**
   * Get truncationStrategy
   * @return truncationStrategy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUNCATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateRunRequestTruncationStrategy getTruncationStrategy() {
    return truncationStrategy;
  }


  @JsonProperty(JSON_PROPERTY_TRUNCATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTruncationStrategy(@javax.annotation.Nullable CreateRunRequestTruncationStrategy truncationStrategy) {
    this.truncationStrategy = truncationStrategy;
  }

  public CreateRunRequest toolChoice(@javax.annotation.Nullable CreateRunRequestToolChoice toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

  /**
   * Get toolChoice
   * @return toolChoice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateRunRequestToolChoice getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolChoice(@javax.annotation.Nullable CreateRunRequestToolChoice toolChoice) {
    this.toolChoice = toolChoice;
  }

  public CreateRunRequest parallelToolCalls(@javax.annotation.Nullable Boolean parallelToolCalls) {
    
    this.parallelToolCalls = parallelToolCalls;
    return this;
  }

  /**
   * Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
   * @return parallelToolCalls
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getParallelToolCalls() {
    return parallelToolCalls;
  }


  @JsonProperty(JSON_PROPERTY_PARALLEL_TOOL_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParallelToolCalls(@javax.annotation.Nullable Boolean parallelToolCalls) {
    this.parallelToolCalls = parallelToolCalls;
  }

  public CreateRunRequest responseFormat(@javax.annotation.Nullable AssistantObjectResponseFormat responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

  /**
   * Get responseFormat
   * @return responseFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssistantObjectResponseFormat getResponseFormat() {
    return responseFormat;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseFormat(@javax.annotation.Nullable AssistantObjectResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRunRequest createRunRequest = (CreateRunRequest) o;
    return Objects.equals(this.assistantId, createRunRequest.assistantId) &&
        equalsNullable(this.model, createRunRequest.model) &&
        equalsNullable(this.reasoningEffort, createRunRequest.reasoningEffort) &&
        equalsNullable(this.instructions, createRunRequest.instructions) &&
        equalsNullable(this.additionalInstructions, createRunRequest.additionalInstructions) &&
        equalsNullable(this.additionalMessages, createRunRequest.additionalMessages) &&
        equalsNullable(this.tools, createRunRequest.tools) &&
        equalsNullable(this.metadata, createRunRequest.metadata) &&
        equalsNullable(this.temperature, createRunRequest.temperature) &&
        equalsNullable(this.topP, createRunRequest.topP) &&
        equalsNullable(this.stream, createRunRequest.stream) &&
        equalsNullable(this.maxPromptTokens, createRunRequest.maxPromptTokens) &&
        equalsNullable(this.maxCompletionTokens, createRunRequest.maxCompletionTokens) &&
        Objects.equals(this.truncationStrategy, createRunRequest.truncationStrategy) &&
        Objects.equals(this.toolChoice, createRunRequest.toolChoice) &&
        Objects.equals(this.parallelToolCalls, createRunRequest.parallelToolCalls) &&
        Objects.equals(this.responseFormat, createRunRequest.responseFormat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistantId, hashCodeNullable(model), hashCodeNullable(reasoningEffort), hashCodeNullable(instructions), hashCodeNullable(additionalInstructions), hashCodeNullable(additionalMessages), hashCodeNullable(tools), hashCodeNullable(metadata), hashCodeNullable(temperature), hashCodeNullable(topP), hashCodeNullable(stream), hashCodeNullable(maxPromptTokens), hashCodeNullable(maxCompletionTokens), truncationStrategy, toolChoice, parallelToolCalls, responseFormat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRunRequest {\n");
    sb.append("    assistantId: ").append(toIndentedString(assistantId)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    reasoningEffort: ").append(toIndentedString(reasoningEffort)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    additionalInstructions: ").append(toIndentedString(additionalInstructions)).append("\n");
    sb.append("    additionalMessages: ").append(toIndentedString(additionalMessages)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    maxPromptTokens: ").append(toIndentedString(maxPromptTokens)).append("\n");
    sb.append("    maxCompletionTokens: ").append(toIndentedString(maxCompletionTokens)).append("\n");
    sb.append("    truncationStrategy: ").append(toIndentedString(truncationStrategy)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    parallelToolCalls: ").append(toIndentedString(parallelToolCalls)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `assistant_id` to the URL query string
    if (getAssistantId() != null) {
      try {
        joiner.add(String.format("%sassistant_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssistantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      joiner.add(getModel().toUrlQueryString(prefix + "model" + suffix));
    }

    // add `reasoning_effort` to the URL query string
    if (getReasoningEffort() != null) {
      try {
        joiner.add(String.format("%sreasoning_effort%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReasoningEffort()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `instructions` to the URL query string
    if (getInstructions() != null) {
      try {
        joiner.add(String.format("%sinstructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstructions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `additional_instructions` to the URL query string
    if (getAdditionalInstructions() != null) {
      try {
        joiner.add(String.format("%sadditional_instructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAdditionalInstructions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `additional_messages` to the URL query string
    if (getAdditionalMessages() != null) {
      for (int i = 0; i < getAdditionalMessages().size(); i++) {
        if (getAdditionalMessages().get(i) != null) {
          joiner.add(getAdditionalMessages().get(i).toUrlQueryString(String.format("%sadditional_messages%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      for (int i = 0; i < getTools().size(); i++) {
        if (getTools().get(i) != null) {
          joiner.add(getTools().get(i).toUrlQueryString(String.format("%stools%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_p` to the URL query string
    if (getTopP() != null) {
      try {
        joiner.add(String.format("%stop_p%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopP()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stream` to the URL query string
    if (getStream() != null) {
      try {
        joiner.add(String.format("%sstream%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStream()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_prompt_tokens` to the URL query string
    if (getMaxPromptTokens() != null) {
      try {
        joiner.add(String.format("%smax_prompt_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxPromptTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_completion_tokens` to the URL query string
    if (getMaxCompletionTokens() != null) {
      try {
        joiner.add(String.format("%smax_completion_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxCompletionTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `truncation_strategy` to the URL query string
    if (getTruncationStrategy() != null) {
      joiner.add(getTruncationStrategy().toUrlQueryString(prefix + "truncation_strategy" + suffix));
    }

    // add `tool_choice` to the URL query string
    if (getToolChoice() != null) {
      joiner.add(getToolChoice().toUrlQueryString(prefix + "tool_choice" + suffix));
    }

    // add `parallel_tool_calls` to the URL query string
    if (getParallelToolCalls() != null) {
      try {
        joiner.add(String.format("%sparallel_tool_calls%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParallelToolCalls()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `response_format` to the URL query string
    if (getResponseFormat() != null) {
      joiner.add(getResponseFormat().toUrlQueryString(prefix + "response_format" + suffix));
    }

    return joiner.toString();
  }

}

