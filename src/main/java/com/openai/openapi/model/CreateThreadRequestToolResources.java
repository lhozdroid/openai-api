/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openai.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openai.openapi.model.CreateAssistantRequestToolResourcesCodeInterpreter;
import com.openai.openapi.model.CreateThreadRequestToolResourcesFileSearch;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A set of resources that are made available to the assistant&#39;s tools in this thread. The resources are specific to the type of tool. For example, the &#x60;code_interpreter&#x60; tool requires a list of file IDs, while the &#x60;file_search&#x60; tool requires a list of vector store IDs. 
 */
@JsonPropertyOrder({
  CreateThreadRequestToolResources.JSON_PROPERTY_CODE_INTERPRETER,
  CreateThreadRequestToolResources.JSON_PROPERTY_FILE_SEARCH
})
@JsonTypeName("CreateThreadRequest_tool_resources")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class CreateThreadRequestToolResources {
  public static final String JSON_PROPERTY_CODE_INTERPRETER = "code_interpreter";
  @javax.annotation.Nullable
  private CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter;

  public static final String JSON_PROPERTY_FILE_SEARCH = "file_search";
  @javax.annotation.Nullable
  private JsonNullable<CreateThreadRequestToolResourcesFileSearch> fileSearch = JsonNullable.<CreateThreadRequestToolResourcesFileSearch>undefined();

  public CreateThreadRequestToolResources() {
  }

  public CreateThreadRequestToolResources codeInterpreter(@javax.annotation.Nullable CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter) {
    
    this.codeInterpreter = codeInterpreter;
    return this;
  }

  /**
   * Get codeInterpreter
   * @return codeInterpreter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_INTERPRETER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateAssistantRequestToolResourcesCodeInterpreter getCodeInterpreter() {
    return codeInterpreter;
  }


  @JsonProperty(JSON_PROPERTY_CODE_INTERPRETER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeInterpreter(@javax.annotation.Nullable CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter) {
    this.codeInterpreter = codeInterpreter;
  }

  public CreateThreadRequestToolResources fileSearch(@javax.annotation.Nullable CreateThreadRequestToolResourcesFileSearch fileSearch) {
    this.fileSearch = JsonNullable.<CreateThreadRequestToolResourcesFileSearch>of(fileSearch);
    
    return this;
  }

  /**
   * Get fileSearch
   * @return fileSearch
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateThreadRequestToolResourcesFileSearch getFileSearch() {
        return fileSearch.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILE_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateThreadRequestToolResourcesFileSearch> getFileSearch_JsonNullable() {
    return fileSearch;
  }
  
  @JsonProperty(JSON_PROPERTY_FILE_SEARCH)
  public void setFileSearch_JsonNullable(JsonNullable<CreateThreadRequestToolResourcesFileSearch> fileSearch) {
    this.fileSearch = fileSearch;
  }

  public void setFileSearch(@javax.annotation.Nullable CreateThreadRequestToolResourcesFileSearch fileSearch) {
    this.fileSearch = JsonNullable.<CreateThreadRequestToolResourcesFileSearch>of(fileSearch);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateThreadRequestToolResources createThreadRequestToolResources = (CreateThreadRequestToolResources) o;
    return Objects.equals(this.codeInterpreter, createThreadRequestToolResources.codeInterpreter) &&
        equalsNullable(this.fileSearch, createThreadRequestToolResources.fileSearch);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeInterpreter, hashCodeNullable(fileSearch));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateThreadRequestToolResources {\n");
    sb.append("    codeInterpreter: ").append(toIndentedString(codeInterpreter)).append("\n");
    sb.append("    fileSearch: ").append(toIndentedString(fileSearch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `code_interpreter` to the URL query string
    if (getCodeInterpreter() != null) {
      joiner.add(getCodeInterpreter().toUrlQueryString(prefix + "code_interpreter" + suffix));
    }

    // add `file_search` to the URL query string
    if (getFileSearch() != null) {
      joiner.add(getFileSearch().toUrlQueryString(prefix + "file_search" + suffix));
    }

    return joiner.toString();
  }

}

