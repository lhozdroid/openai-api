/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openai.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.openai.ApiException;
import com.openai.ApiClient;
import com.openai.BaseApi;
import com.openai.Configuration;
import com.openai.Pair;

import com.openai.openapi.model.UsageResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class UsageApi extends BaseApi {

  public UsageApi() {
    super(Configuration.getDefaultApiClient());
  }

  public UsageApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get audio speeches usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageAudioSpeeches(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageAudioSpeeches(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get audio speeches usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageAudioSpeeches(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageAudioSpeeches");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/audio_speeches";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get audio transcriptions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageAudioTranscriptions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageAudioTranscriptions(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get audio transcriptions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageAudioTranscriptions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageAudioTranscriptions");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/audio_transcriptions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get code interpreter sessions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCodeInterpreterSessions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageCodeInterpreterSessions(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get code interpreter sessions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCodeInterpreterSessions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageCodeInterpreterSessions");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/code_interpreter_sessions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get completions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both.  (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCompletions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, Boolean batch, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageCompletions(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, batch, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get completions usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both.  (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCompletions(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, Boolean batch, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageCompletions");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/completions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarQueryParams.addAll(apiClient.parameterToPair("batch", batch));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get costs details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only costs for these projects. (optional)
   * @param groupBy Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
   * @param limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.  (optional, default to 7)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCosts(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageCosts(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get costs details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only costs for these projects. (optional)
   * @param groupBy Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
   * @param limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.  (optional, default to 7)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageCosts(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageCosts");
    }
    
    // create path and map variables
    String localVarPath = "/organization/costs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get embeddings usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageEmbeddings(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageEmbeddings(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get embeddings usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageEmbeddings(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageEmbeddings");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/embeddings";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get images usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
   * @param sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageImages(Integer startTime, Integer endTime, String bucketWidth, List<String> sources, List<String> sizes, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageImages(startTime, endTime, bucketWidth, sources, sizes, projectIds, userIds, apiKeyIds, models, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get images usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
   * @param sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageImages(Integer startTime, Integer endTime, String bucketWidth, List<String> sources, List<String> sizes, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageImages");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/images";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sources", sources));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sizes", sizes));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get moderations usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageModerations(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageModerations(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get moderations usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param userIds Return only usage for these users. (optional)
   * @param apiKeyIds Return only usage for these API keys. (optional)
   * @param models Return only usage for these models. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageModerations(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> userIds, List<String> apiKeyIds, List<String> models, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageModerations");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/moderations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_ids", userIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "api_key_ids", apiKeyIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "models", models));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get vector stores usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageVectorStores(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page) throws ApiException {
    return this.usageVectorStores(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page, Collections.emptyMap());
  }


  /**
   * Get vector stores usage details for the organization.
   * 
   * @param startTime Start time (Unix seconds) of the query time range, inclusive. (required)
   * @param endTime End time (Unix seconds) of the query time range, exclusive. (optional)
   * @param bucketWidth Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to 1d)
   * @param projectIds Return only usage for these projects. (optional)
   * @param groupBy Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
   * @param limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440  (optional)
   * @param page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return UsageResponse
   * @throws ApiException if fails to make API call
   */
  public UsageResponse usageVectorStores(Integer startTime, Integer endTime, String bucketWidth, List<String> projectIds, List<String> groupBy, Integer limit, String page, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling usageVectorStores");
    }
    
    // create path and map variables
    String localVarPath = "/organization/usage/vector_stores";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
    localVarQueryParams.addAll(apiClient.parameterToPair("bucket_width", bucketWidth));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "project_ids", projectIds));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<UsageResponse> localVarReturnType = new TypeReference<UsageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
