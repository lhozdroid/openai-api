/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openai.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.openai.ApiException;
import com.openai.ApiClient;
import com.openai.BaseApi;
import com.openai.Configuration;
import com.openai.Pair;

import com.openai.openapi.model.CreateVectorStoreFileBatchRequest;
import com.openai.openapi.model.CreateVectorStoreFileRequest;
import com.openai.openapi.model.CreateVectorStoreRequest;
import com.openai.openapi.model.DeleteVectorStoreFileResponse;
import com.openai.openapi.model.DeleteVectorStoreResponse;
import com.openai.openapi.model.ListVectorStoreFilesResponse;
import com.openai.openapi.model.ListVectorStoresResponse;
import com.openai.openapi.model.UpdateVectorStoreRequest;
import com.openai.openapi.model.VectorStoreFileBatchObject;
import com.openai.openapi.model.VectorStoreFileObject;
import com.openai.openapi.model.VectorStoreObject;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T10:23:25.420936454-05:00[US/Eastern]", comments = "Generator version: 7.11.0")
public class VectorStoresApi extends BaseApi {

  public VectorStoresApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VectorStoresApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
   * 
   * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
   * @param batchId The ID of the file batch to cancel. (required)
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject cancelVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
    return this.cancelVectorStoreFileBatch(vectorStoreId, batchId, Collections.emptyMap());
  }


  /**
   * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
   * 
   * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
   * @param batchId The ID of the file batch to cancel. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject cancelVectorStoreFileBatch(String vectorStoreId, String batchId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling cancelVectorStoreFileBatch");
    }
    
    // verify the required parameter 'batchId' is set
    if (batchId == null) {
      throw new ApiException(400, "Missing the required parameter 'batchId' when calling cancelVectorStoreFileBatch");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)))
      .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(batchId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreFileBatchObject> localVarReturnType = new TypeReference<VectorStoreFileBatchObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a vector store.
   * 
   * @param createVectorStoreRequest  (required)
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject createVectorStore(CreateVectorStoreRequest createVectorStoreRequest) throws ApiException {
    return this.createVectorStore(createVectorStoreRequest, Collections.emptyMap());
  }


  /**
   * Create a vector store.
   * 
   * @param createVectorStoreRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject createVectorStore(CreateVectorStoreRequest createVectorStoreRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createVectorStoreRequest;
    
    // verify the required parameter 'createVectorStoreRequest' is set
    if (createVectorStoreRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createVectorStoreRequest' when calling createVectorStore");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreObject> localVarReturnType = new TypeReference<VectorStoreObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
   * 
   * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
   * @param createVectorStoreFileRequest  (required)
   * @return VectorStoreFileObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileObject createVectorStoreFile(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest) throws ApiException {
    return this.createVectorStoreFile(vectorStoreId, createVectorStoreFileRequest, Collections.emptyMap());
  }


  /**
   * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
   * 
   * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
   * @param createVectorStoreFileRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreFileObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileObject createVectorStoreFile(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createVectorStoreFileRequest;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling createVectorStoreFile");
    }
    
    // verify the required parameter 'createVectorStoreFileRequest' is set
    if (createVectorStoreFileRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createVectorStoreFileRequest' when calling createVectorStoreFile");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/files"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreFileObject> localVarReturnType = new TypeReference<VectorStoreFileObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a vector store file batch.
   * 
   * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
   * @param createVectorStoreFileBatchRequest  (required)
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject createVectorStoreFileBatch(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest) throws ApiException {
    return this.createVectorStoreFileBatch(vectorStoreId, createVectorStoreFileBatchRequest, Collections.emptyMap());
  }


  /**
   * Create a vector store file batch.
   * 
   * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
   * @param createVectorStoreFileBatchRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject createVectorStoreFileBatch(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createVectorStoreFileBatchRequest;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling createVectorStoreFileBatch");
    }
    
    // verify the required parameter 'createVectorStoreFileBatchRequest' is set
    if (createVectorStoreFileBatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createVectorStoreFileBatchRequest' when calling createVectorStoreFileBatch");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/file_batches"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreFileBatchObject> localVarReturnType = new TypeReference<VectorStoreFileBatchObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to delete. (required)
   * @return DeleteVectorStoreResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteVectorStoreResponse deleteVectorStore(String vectorStoreId) throws ApiException {
    return this.deleteVectorStore(vectorStoreId, Collections.emptyMap());
  }


  /**
   * Delete a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DeleteVectorStoreResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteVectorStoreResponse deleteVectorStore(String vectorStoreId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling deleteVectorStore");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<DeleteVectorStoreResponse> localVarReturnType = new TypeReference<DeleteVectorStoreResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
   * 
   * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
   * @param fileId The ID of the file to delete. (required)
   * @return DeleteVectorStoreFileResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteVectorStoreFileResponse deleteVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
    return this.deleteVectorStoreFile(vectorStoreId, fileId, Collections.emptyMap());
  }


  /**
   * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
   * 
   * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
   * @param fileId The ID of the file to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DeleteVectorStoreFileResponse
   * @throws ApiException if fails to make API call
   */
  public DeleteVectorStoreFileResponse deleteVectorStoreFile(String vectorStoreId, String fileId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling deleteVectorStoreFile");
    }
    
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling deleteVectorStoreFile");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)))
      .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(fileId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<DeleteVectorStoreFileResponse> localVarReturnType = new TypeReference<DeleteVectorStoreFileResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to retrieve. (required)
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject getVectorStore(String vectorStoreId) throws ApiException {
    return this.getVectorStore(vectorStoreId, Collections.emptyMap());
  }


  /**
   * Retrieves a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to retrieve. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject getVectorStore(String vectorStoreId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling getVectorStore");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreObject> localVarReturnType = new TypeReference<VectorStoreObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a vector store file.
   * 
   * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
   * @param fileId The ID of the file being retrieved. (required)
   * @return VectorStoreFileObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileObject getVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
    return this.getVectorStoreFile(vectorStoreId, fileId, Collections.emptyMap());
  }


  /**
   * Retrieves a vector store file.
   * 
   * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
   * @param fileId The ID of the file being retrieved. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreFileObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileObject getVectorStoreFile(String vectorStoreId, String fileId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling getVectorStoreFile");
    }
    
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling getVectorStoreFile");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)))
      .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(fileId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreFileObject> localVarReturnType = new TypeReference<VectorStoreFileObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieves a vector store file batch.
   * 
   * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
   * @param batchId The ID of the file batch being retrieved. (required)
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject getVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
    return this.getVectorStoreFileBatch(vectorStoreId, batchId, Collections.emptyMap());
  }


  /**
   * Retrieves a vector store file batch.
   * 
   * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
   * @param batchId The ID of the file batch being retrieved. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreFileBatchObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreFileBatchObject getVectorStoreFileBatch(String vectorStoreId, String batchId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling getVectorStoreFileBatch");
    }
    
    // verify the required parameter 'batchId' is set
    if (batchId == null) {
      throw new ApiException(400, "Missing the required parameter 'batchId' when calling getVectorStoreFileBatch");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)))
      .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(batchId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreFileBatchObject> localVarReturnType = new TypeReference<VectorStoreFileBatchObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of vector store files in a batch.
   * 
   * @param vectorStoreId The ID of the vector store that the files belong to. (required)
   * @param batchId The ID of the file batch that the files belong to. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
   * @return ListVectorStoreFilesResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter) throws ApiException {
    return this.listFilesInVectorStoreBatch(vectorStoreId, batchId, limit, order, after, before, filter, Collections.emptyMap());
  }


  /**
   * Returns a list of vector store files in a batch.
   * 
   * @param vectorStoreId The ID of the vector store that the files belong to. (required)
   * @param batchId The ID of the file batch that the files belong to. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListVectorStoreFilesResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling listFilesInVectorStoreBatch");
    }
    
    // verify the required parameter 'batchId' is set
    if (batchId == null) {
      throw new ApiException(400, "Missing the required parameter 'batchId' when calling listFilesInVectorStoreBatch");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)))
      .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(batchId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ListVectorStoreFilesResponse> localVarReturnType = new TypeReference<ListVectorStoreFilesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of vector store files.
   * 
   * @param vectorStoreId The ID of the vector store that the files belong to. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
   * @return ListVectorStoreFilesResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId, Integer limit, String order, String after, String before, String filter) throws ApiException {
    return this.listVectorStoreFiles(vectorStoreId, limit, order, after, before, filter, Collections.emptyMap());
  }


  /**
   * Returns a list of vector store files.
   * 
   * @param vectorStoreId The ID of the vector store that the files belong to. (required)
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListVectorStoreFilesResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId, Integer limit, String order, String after, String before, String filter, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling listVectorStoreFiles");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}/files"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ListVectorStoreFilesResponse> localVarReturnType = new TypeReference<ListVectorStoreFilesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Returns a list of vector stores.
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @return ListVectorStoresResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoresResponse listVectorStores(Integer limit, String order, String after, String before) throws ApiException {
    return this.listVectorStores(limit, order, after, before, Collections.emptyMap());
  }


  /**
   * Returns a list of vector stores.
   * 
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListVectorStoresResponse
   * @throws ApiException if fails to make API call
   */
  public ListVectorStoresResponse listVectorStores(Integer limit, String order, String after, String before, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/vector_stores";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ListVectorStoresResponse> localVarReturnType = new TypeReference<ListVectorStoresResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Modifies a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to modify. (required)
   * @param updateVectorStoreRequest  (required)
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject modifyVectorStore(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest) throws ApiException {
    return this.modifyVectorStore(vectorStoreId, updateVectorStoreRequest, Collections.emptyMap());
  }


  /**
   * Modifies a vector store.
   * 
   * @param vectorStoreId The ID of the vector store to modify. (required)
   * @param updateVectorStoreRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VectorStoreObject
   * @throws ApiException if fails to make API call
   */
  public VectorStoreObject modifyVectorStore(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updateVectorStoreRequest;
    
    // verify the required parameter 'vectorStoreId' is set
    if (vectorStoreId == null) {
      throw new ApiException(400, "Missing the required parameter 'vectorStoreId' when calling modifyVectorStore");
    }
    
    // verify the required parameter 'updateVectorStoreRequest' is set
    if (updateVectorStoreRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateVectorStoreRequest' when calling modifyVectorStore");
    }
    
    // create path and map variables
    String localVarPath = "/vector_stores/{vector_store_id}"
      .replaceAll("\\{" + "vector_store_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(vectorStoreId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<VectorStoreObject> localVarReturnType = new TypeReference<VectorStoreObject>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
